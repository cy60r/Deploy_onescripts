#Использовать ReadParams
#Использовать crypto
#Использовать monitoring
#Использовать cmdline
#Использовать 1commands
#Использовать v8rac
#Использовать v8runner
#Использовать v8storage

// Подключение к кластеру
Перем УправлениеКластером;
// Подключение к конфигуратору
Перем Конфигуратор;
// Параметры из конфигурационного файла json
Перем Параметры;
// Мониторинг
Перем Мониторинг;

#Область НачальныеНастройки

Процедура УстановитьКонтекстКонфигурации()
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.ИспользоватьВерсиюПлатформы(Параметры["ВерсияПлатформы"], РазрядностьПлатформы.x64x86);
	
	СтрокаПодключения = СтрШаблон("/S%1\%2", Параметры["ИмяСервера"], Параметры["ИмяИБ"]);

	Конфигуратор.УстановитьКонтекст(СтрокаПодключения,
		Параметры["ПользовательИБ"], Параметры["ПарольИБ"]);
	
	Конфигуратор.УстановитьКодЯзыкаСеанса("ru");
	Конфигуратор.УстановитьКлючРазрешенияЗапуска(Параметры["КлючРазрешенияЗапуска"]);
	Мониторинг.Отладка("Информационная база подключена");
	
КонецПроцедуры

Процедура ПрочитатьАргументы()
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	Парсер.ДобавитьИменованныйПараметр("--config");
	Парсер.ДобавитьИменованныйПараметр("--denied-from");
	Парсер.ДобавитьИменованныйПараметр("--denied-to");
	
	Аргументы = Парсер.Разобрать(АргументыКоманднойСтроки);
	
	Конфиг = Аргументы["--config"];
	
	Если Не ЗначениеЗаполнено(Конфиг) Тогда
		
		ЗавершитьРаботу(404);
		
	КонецЕсли;
	
	Параметры = ЧтениеПараметров.Прочитать(Конфиг);
	
	Параметры.Вставить("ДатаНачалаБлокировки", Аргументы["--denied-from"]);
	Параметры.Вставить("ДатаОкончанияБлокировки", Аргументы["--denied-to"]);
	
	УстановитьТекущийКаталог(Параметры["КаталогЛога"]);
	
	РасшифроватьТокен();
	
КонецПроцедуры

Процедура РасшифроватьТокен()
	
	JWT = Новый JWT;
	
	РасшифрованныеДанные = JWT.Декодировать(Параметры["Токен"], Параметры["КлючТокена"]);
	
	Параметры.Вставить("ПользовательИБ", РасшифрованныеДанные.ПользовательИБ);
	Параметры.Вставить("ПарольИБ", РасшифрованныеДанные.ПарольИБ);
	Параметры.Вставить("ПользовательХранилища", РасшифрованныеДанные.ПользовательХранилища);
	Параметры.Вставить("ПарольХранилища", РасшифрованныеДанные.ПарольХранилища);
	
КонецПроцедуры

Процедура ИнициализироватьМониторинг()
	
	Мониторинг = Новый УправлениеМониторингом();
	Мониторинг.СоздатьФайлЛога(Параметры["ИмяЛога"], Параметры["КаталогЛога"]);
	
	Мониторинг.ЗаполнитьПараметрыТелеграм(Параметры["ТелеграмБот"], Параметры["ТелеграмЧат"]);
	
	ЗаголовокСкрипта = СтрШаблон("Начало выполнения обновления релиза базы %1",
			Параметры["ИмяИБ"]);
	
	Мониторинг.Информация(ЗаголовокСкрипта);
	Мониторинг.УвеличитьУровень();
	
КонецПроцедуры

Процедура ПодключитьУправлениеКластером()
	
	УправлениеКластером = Новый УправлениеКластером;
	УправлениеКластером.УстановитьКластер(Параметры["ИмяСервераКластера"]);
	УправлениеКластером.ИспользоватьВерсию(Параметры["ВерсияПлатформы"]);
	УправлениеКластером.УстановитьАвторизациюКластера(Параметры["ПользовательКластера"], Параметры["ПарольИБ"]);
	УправлениеКластером.Подключить();
	УправлениеКластером.УстановитьАвторизациюИнформационнойБазы(Параметры["ИмяИБ"],
		Параметры["ПользовательИБ"], Параметры["ПарольИБ"]);
	Мониторинг.Отладка("Управление кластером подключено");
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаНаличияИзменений

Процедура ОтключитьПользователейКонфигуратора()
	
	Массив = Новый Массив;
	Массив.Добавить("Designer");
	Фильтр = Новый Структура("Приложение", Массив);
	
	УправлениеКластером.ОтключитьСеансыИнформационнойБазыПоФильтру(Параметры["ИмяИБ"], Фильтр);
	Мониторинг.Отладка("Сеансы конфигуратора отключены");
	
КонецПроцедуры

Функция ВерсияКонфигурацийОтличаетсяХранилищ()
	
	ВерсииРазличаются = Ложь;
	
	ДанныеТекущегоРелиза = ДанныеТекущегоРелиза();
	
	ДанныеТекущейВерсииХранилища = ДанныеТекущейВерсииХранилища(ВерсииРазличаются, ДанныеТекущегоРелиза,
			Параметры["ХранилищеОсновнойКонфигурации"], "ВерсияОсновнойКонфигурации");
	
	Параметры.Вставить("ВерсияОсновнойКонфигурации", ДанныеТекущейВерсииХранилища.НомерТекущейВерсии);
	Параметры.Вставить("НовыеВерсииОсновнойКонфигурации", ДанныеТекущейВерсииХранилища.НовыеВерсии);
	
	МассивРасширений = Новый Массив;
	МассивНовыхВерсийРасширений = Новый Массив();
	
	Для каждого Расширение Из Параметры["СписокРасширений"] Цикл
		
		ДанныеТекущейВерсииХранилища = ДанныеТекущейВерсииХранилища(ВерсииРазличаются, ДанныеТекущегоРелиза,
			Расширение.Хранилище, Расширение.ИмяРасширения, Истина);
		
		Структура = Новый Структура();
		Структура.Вставить("ИмяРасширения", Расширение.ИмяРасширения);
		Структура.Вставить("ВерсияРасширения", ДанныеТекущейВерсииХранилища.НомерТекущейВерсии);
		МассивРасширений.Добавить(Структура);
		
		Структура = Новый Структура();
		Структура.Вставить("ИмяРасширения", Расширение.ИмяРасширения);
		Структура.Вставить("Хранилище", Расширение.Хранилище);
		Структура.Вставить("НовыеВерсии", ДанныеТекущейВерсииХранилища.НовыеВерсии);
		МассивНовыхВерсийРасширений.Добавить(Структура);
		
	КонецЦикла;
	
	Параметры.Вставить("ВерсииКонфигурацийРасширения", МассивРасширений);
	Параметры.Вставить("НовыеВерсииРасширений", МассивНовыхВерсийРасширений);
	
	Если Не ВерсииРазличаются Тогда
		
		ТекстИнформации = СтрШаблон(
			"Версии конфигураций базы %1 не отличаются от конфигураций хранилищ", Параметры["ИмяИБ"]);
		Мониторинг.Информация(ТекстИнформации);
		
	КонецЕсли;
	
	Возврат ВерсииРазличаются;
	
КонецФункции

Функция ДанныеТекущейВерсииХранилища(
	ВерсииРазличаются, ДанныеТекущегоРелиза, Хранилище, ИмяКонфигурации, ЭтоРасширение = Ложь)
	
	Результат = Новый Структура("НомерТекущейВерсии, НовыеВерсии");
	
	НомерВерсии = ДанныеТекущегоРелиза.Получить(ИмяКонфигурации);
	СледующаяВерсияСтрокой = Строка(Число(НомерВерсии) + 1);
	
	ТаблицаВерсий = ТаблицаВерсийХранилища(
			СледующаяВерсияСтрокой, Хранилище, ?(ЭтоРасширение, ИмяКонфигурации, ""));
	
	Если ТаблицаВерсий.Количество() = 0 Тогда
		
		НомерТекущейВерсии = НомерВерсии;
		
	Иначе
		
		НомерТекущейВерсии = ТаблицаВерсий[ТаблицаВерсий.Количество() - 1].Номер;
		
	КонецЕсли;
	
	НовыеВерсии = Новый Массив;
	
	Если ТаблицаВерсий.Количество() <> 0 Тогда
		
		Если ЭтоРасширение Тогда

			ТекстРезультатаСравнения = СтрШаблон("Версия %1 расширения %2 конфигурации базы %3 отличается от текущей",
			НомерВерсии, ИмяКонфигурации, Параметры["ИмяИБ"]);

		Иначе

			ТекстРезультатаСравнения = СтрШаблон("Версия %1 основной конфигурации базы %2 отличается от текущей",
			НомерВерсии, Параметры["ИмяИБ"]);		

		КонецЕсли;
		
		Мониторинг.Информация(ТекстРезультатаСравнения);
		ВерсииРазличаются = Истина;
		
		Для каждого НоваяВерсия Из ТаблицаВерсий Цикл
			
			НовыеВерсии.Добавить(НоваяВерсия.Номер);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.НомерТекущейВерсии = НомерТекущейВерсии;
	Результат.НовыеВерсии = НовыеВерсии;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеТекущегоРелиза()
	
	Результат = Новый Соответствие();
	
	ЧтениеТекста = Новый ЧтениеТекста(Параметры["ФайлДанныхРелиза"], КодировкаТекста.UTF8);
	СтрокаJSON = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	ПарсерJSON = Новый ПарсерJSON();
	Структура = ПарсерJSON.ПрочитатьJSON(СтрокаJSON);
	
	Результат.Вставить("ВерсияОсновнойКонфигурации", Структура["ВерсияОсновнойКонфигурации"]);
	
	Для каждого Расширение Из Структура["ВерсииКонфигурацийРасширения"] Цикл
		
		Результат.Вставить(Расширение["ИмяРасширения"], Расширение["ВерсияРасширения"]);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаВерсийХранилища(НомерНачальнойВерсии, ПутьКХранилищу, ИмяРасширения = "")
	
	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации( , Конфигуратор);
	ХранилищеКонфигурации.УстановитьПутьКХранилищу(ПутьКХранилищу);
	ХранилищеКонфигурации.УстановитьРасширениеХранилища(ИмяРасширения);
	ХранилищеКонфигурации.УстановитьПараметрыАвторизации(Параметры["ПользовательХранилища"],
		Параметры["ПарольХранилища"]);
	Возврат ХранилищеКонфигурации.ПолучитьТаблицуВерсийСВерсии(НомерНачальнойВерсии);
	
КонецФункции

#КонецОбласти

#Область БлокировкаИОтключениеСоединений

Процедура УстановитьБлокировкуИБ()
	
	СообщениеОБлокировке = СообщениеОБлокировкеПоШаблону();
	ДатаНачалаБлокировкиФормат = ФорматДатыДляБлокировки(Параметры["ДатаНачалаБлокировки"]);
	ДатаОкончанияБлокировкиФормат = ФорматДатыДляБлокировки(Параметры["ДатаОкончанияБлокировки"]);
	
	ПараметрыАвторизацииИБ = ПараметрыАвторизацииИБ();
	
	УправлениеКластером.БлокировкаИнформационнойБазы(Параметры["ИмяИБ"], СообщениеОБлокировке,
		Параметры["КлючРазрешенияЗапуска"], ДатаНачалаБлокировкиФормат,
		ДатаОкончанияБлокировкиФормат, Истина, ПараметрыАвторизацииИБ);
	
	Мониторинг.Отладка("Блокировка ИБ установлена");
	
КонецПроцедуры

Функция ФорматДатыДляБлокировки(Дата)
	
	ПредставлениеДаты = СтрШаблон("%1%2:00Z", Формат(ТекущаяДата(), "ДФ=yyyy-MM-ddT"), Дата);
	Возврат ПрочитатьДатуJSON(ПредставлениеДаты, ФорматДатыJSON.ISO);
	
КонецФункции

Функция СообщениеОБлокировкеПоШаблону()
	
	ТекстовыйФайл = Новый ЧтениеТекста(Параметры["ФайлСообщенияБлокировки"]);
	ТекстБлокировки = ТекстовыйФайл.Прочитать();
	СообщениеОБлокировке = СтрШаблон(ТекстБлокировки,
			Параметры["ДатаНачалаБлокировки"], Параметры["ДатаОкончанияБлокировки"]);
	ТекстовыйФайл.Закрыть();
	
	Возврат СообщениеОБлокировке;
	
КонецФункции

Функция ПараметрыАвторизацииИБ()
	
	ПараметрыАвторизации = Новый Структура();
	ПараметрыАвторизации.Вставить("Пользователь", Параметры["ПользовательИБ"]);
	ПараметрыАвторизации.Вставить("Пароль", Параметры["ПарольИБ"]);
	
	Возврат ПараметрыАвторизации;
	
КонецФункции

Процедура ОтключитьПользователейИБ()
	
	УправлениеКластером.ОтключитьСеансыИнформационнойБазы(Параметры["ИмяИБ"]);
	Мониторинг.Отладка("Сеансы отключены");
	
КонецПроцедуры

Процедура ОтключитьСоединенияИнформационнойБазы()
	
	УправлениеКластером.ОтключитьСоединенияИнформационнойБазы(Параметры["ИмяИБ"]);
	Мониторинг.Отладка("Соединения отключены");
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеКонфигурации

Процедура ОбновитьОсновнуюКонфигурациюИзХранилища()
	
	Конфигуратор.ОбновитьКонфигурациюБазыДанныхИзХранилища(Параметры["ХранилищеОсновнойКонфигурации"],
		Параметры["ПользовательХранилища"], Параметры["ПарольХранилища"]);
	Мониторинг.Информация(СтрШаблон("Основная конфигурация базы %1 обновлена из хранилища", Параметры["ИмяИБ"]));
	
КонецПроцедуры

Процедура ОбновитьКонфигурациюРасширенияИзХранилища(ИмяРасширения, ХранилищеРасширения)
	
	Конфигуратор.ОбновитьКонфигурациюБазыДанныхИзХранилища(ХранилищеРасширения,
		Параметры["ПользовательХранилища"], Параметры["ПарольХранилища"], 0, ИмяРасширения);
	
	ТекстМониторинга = СтрШаблон("Конфигурация расширения %1 базы %2 обновлена из хранилища", 
	ИмяРасширения, Параметры["ИмяИБ"]);
	
	Мониторинг.Информация(ТекстМониторинга);
	
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеВыполнения

Процедура СнятьБлокировкуИБ()
	
	УправлениеКластером.СнятьБлокировкуИнформационнойБазы(Параметры["ИмяИБ"], Параметры["ОставитьБлокировкуРеглЗаданий"]);
	Мониторинг.Отладка("Блокировка ИБ снята");
	
КонецПроцедуры

Процедура ЗавершитьОбновление()
	
	Мониторинг.УменьшитьУровень();
	ТекстИнформации = СтрШаблон("Окончание обновления базы %1", Параметры["ИмяИБ"]);
	Мониторинг.Информация(ТекстИнформации);
	
КонецПроцедуры

Процедура ОбработатьИсключение(ТекстОшибки)
	
	СнятьБлокировкуИБ();
	Мониторинг.Внимание(ТекстОшибки);
	Мониторинг.УменьшитьУровень();
	Мониторинг.КритическаяОшибка("Во время обновления произошла ошибка!");
	Мониторинг.Информация(СтрШаблон("Обновление базы %1 не было выполнено", Параметры["ИмяИБ"]));
	
КонецПроцедуры

Процедура УстановитьМеткиОбновления()

	Метка = Параметры["Метка"];
	Комментарий = КомментарийДляМетки();

	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации( , Конфигуратор);
	ХранилищеКонфигурации.УстановитьПутьКХранилищу(Параметры["ХранилищеОсновнойКонфигурации"]);
	ХранилищеКонфигурации.УстановитьРасширениеХранилища("");
	ХранилищеКонфигурации.УстановитьПараметрыАвторизации(Параметры["ПользовательХранилища"],
		Параметры["ПарольХранилища"]);

	Для каждого Версия Из Параметры["НовыеВерсииОсновнойКонфигурации"] Цикл
		
		УстановитьМетку(ХранилищеКонфигурации, Версия, Метка, Комментарий);
		
	КонецЦикла;
	
	Для каждого Расширение Из Параметры["НовыеВерсииРасширений"] Цикл

		ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации( , Конфигуратор);
		ХранилищеКонфигурации.УстановитьПутьКХранилищу(Расширение.Хранилище);
		ХранилищеКонфигурации.УстановитьРасширениеХранилища(Расширение.ИмяРасширения);
		ХранилищеКонфигурации.УстановитьПараметрыАвторизации(Параметры["ПользовательХранилища"],
			Параметры["ПарольХранилища"]);

		Для каждого Версия Из Расширение.НовыеВерсии Цикл
		
			УстановитьМетку(ХранилищеКонфигурации, Версия, Метка, Комментарий);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Мониторинг.Отладка("Метки для новых версий установлены");
	
КонецПроцедуры

Функция КомментарийДляМетки()

	Возврат СтрШаблон(Параметры["КомментарийМетки"], Формат(ТекущаяДата(), "DT"));
	
КонецФункции

Процедура УстановитьМетку(ХранилищеКонфигурации, Версия, Метка, Комментарий)
		
	ХранилищеКонфигурации.УстановитьМеткуДляВерсииВХранилище(Метка, Комментарий, Версия);
	
КонецПроцедуры

Процедура ОбновитьДанныеВерсийРелиза()
	
	ДанныеТекущегоРелиза = Новый Структура();
	ДанныеТекущегоРелиза.Вставить("ВерсияОсновнойКонфигурации", Параметры["ВерсияОсновнойКонфигурации"]);
	ДанныеТекущегоРелиза.Вставить("ВерсииКонфигурацийРасширения", Параметры["ВерсииКонфигурацийРасширения"]);
	
	ПарсерJSON = Новый ПарсерJSON();
	СтрокаJSON = ПарсерJSON.ЗаписатьJSON(ДанныеТекущегоРелиза);
	Запись = Новый ЗаписьТекста;
	Запись.Открыть(Параметры["ФайлДанныхРелиза"]);
	Запись.Записать(СтрокаJSON);
	Запись.Закрыть();
	
	Мониторинг.Отладка("Файл данных релиза обновлен");
	
КонецПроцедуры

#КонецОбласти

Попытка
	
	ПрочитатьАргументы();
	ИнициализироватьМониторинг();
	ПодключитьУправлениеКластером();
	УстановитьКонтекстКонфигурации();
	
	ОтключитьПользователейКонфигуратора();
	
	Если ВерсияКонфигурацийОтличаетсяХранилищ() Тогда
		
		УстановитьБлокировкуИБ();
		ОтключитьПользователейИБ();
		ОтключитьСоединенияИнформационнойБазы();
		
		ОбновитьОсновнуюКонфигурациюИзХранилища();
		
		Для каждого Расширение Из Параметры["СписокРасширений"] Цикл
			
			ОбновитьКонфигурациюРасширенияИзХранилища(Расширение.ИмяРасширения, Расширение.Хранилище);
			
		КонецЦикла;
		
		СнятьБлокировкуИБ();
		УстановитьМеткиОбновления();
		ОбновитьДанныеВерсийРелиза();
		
	КонецЕсли;
	
	ЗавершитьОбновление();
	
Исключение
	
	ОбработатьИсключение(ОписаниеОшибки());
	
КонецПопытки;