#Использовать v8storage
#Использовать v8runner
#Использовать ReadParams
#Использовать Tlog
#Использовать xml-parser
#Использовать gitrunner
#Использовать tempfiles
#Использовать json

Перем Конфигуратор;
Перем Параметры;
Перем Логирование;

Процедура ПрочитатьПараметрыИзФайла()

	УстановитьТекущийКаталог("C:\scripts\SyncGit");
	Параметры = ЧтениеПараметров.Прочитать(ОбъединитьПути(ТекущийКаталог(), "SyncGit.json"));

КонецПроцедуры

Процедура ИнициализироватьЛог()
	
	Логирование = Новый ТУправлениеЛогированием();
	Логирование.ДатаВремяВКаждойСтроке = Истина;
	Логирование.ВыводитьСообщенияПриЗаписи = Истина; 
	Логирование.СоздатьФайлЛога(Параметры["ИмяЛога"], Параметры["КаталогЛога"]);
	Логирование.ЗаписатьСтрокуЛога("Начало синхронизации с GIT");
	Логирование.УвеличитьУровень();

КонецПроцедуры

Процедура УстановитьКонтекстКонфигурации()

	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.УстановитьКонтекст("/S" + Параметры["ИмяСервера"] + "\" + 
	Параметры["ИмяБазы"], Параметры["ПользовательИБ"], Параметры["ПарольИБ"]);
	Логирование.ЗаписатьСтрокуЛога("Информационная база подключена");

КонецПроцедуры

Процедура ВыполнитьСинхронизациюГИТ()

	НомерВерсии = НомерТекущейВерсии();
	ТаблицаВерсий = ТаблицаВерсийХранилища(Строка(Число(НомерВерсии) + 1));

	Логирование.ЗаписатьСтрокуЛога("Начата синхронизация с GIT");
	Логирование.УвеличитьУровень();

	Для каждого Строка Из ТаблицаВерсий Цикл

		ВыгрузитьВИсходникиИнкрементно(Строка.Номер);
		СделатьКоммитВерсии(Строка);
		НомерВерсии = Строка.Номер;
		ЗаписатьИнформациюОНовойВерсии(НомерВерсии);
		Прервать;
		
	КонецЦикла;
	
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("Синхронизация выполнена");

КонецПроцедуры

Функция НомерТекущейВерсии()
	
	ПроцессорXML = Новый СериализацияДанныхXML();
	РезультатЧтения = ПроцессорXML.ПрочитатьИзФайла(Параметры["ФайлВерсии"]);
	Возврат РезультатЧтения["VERSION"];

КонецФункции

Функция ТаблицаВерсийХранилища(НомерНачальнойВерсии)

	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации(, Конфигуратор);
	ХранилищеКонфигурации.УстановитьПутьКХранилищу(Параметры["ПутьКХранилищу"]);
	ХранилищеКонфигурации.УстановитьПараметрыАвторизации(Параметры["ПользовательХранилища"], 
	Параметры["ПарольХранилища"]);
	Логирование.ЗаписатьСтрокуЛога("Получена таблица версий");
	Возврат ХранилищеКонфигурации.ПолучитьТаблицуВерсийСВерсии(НомерНачальнойВерсии);

КонецФункции

Процедура ВыгрузитьВИсходникиИнкрементно(НомерВерсии)
	
	Логирование.ЗаписатьСтрокуЛога("Начата синхронизация версии " + НомерВерсии);
	Логирование.УвеличитьУровень();

	ВременныйКаталог = Параметры["ВременныйКаталог"];

	ВременныйКонфигуратор = Новый УправлениеКонфигуратором();

	ВременныйКонфигуратор.СоздатьФайловуюБазу(ВременныйКаталог);
	ВременныйКонфигуратор.УстановитьКонтекст("/F" + ВременныйКаталог, "", "");

	ВременныйФайл = ОбъединитьПути(ВременныйКаталог, "temp.cf");
	Конфигуратор.ВыгрузитьКонфигурациюХранилищаВФайл(Параметры["ПутьКХранилищу"], 
	Параметры["ПользовательХранилища"], Параметры["ПарольХранилища"], НомерВерсии, ВременныйФайл);
	Логирование.ЗаписатьСтрокуЛога("Конфигурация хранилища выгружена");

	ВременныйКонфигуратор.ЗагрузитьКонфигурациюИзФайла(ВременныйФайл);
	Логирование.ЗаписатьСтрокуЛога("Конфигурация хранилища загружена");

	ПараметрыКоманды = ВременныйКонфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыКоманды.Добавить("/DumpConfigToFiles");
	ПараметрыКоманды.Добавить(Параметры["КаталогВыгрузки"]);
	ПараметрыКоманды.Добавить("-update");
	ВременныйКонфигуратор.ВыполнитьКоманду(ПараметрыКоманды);

	Логирование.ЗаписатьСтрокуЛога("Файлы конфигурации версии выгружены");
    УдалитьФайлы(ВременныйКаталог);

КонецПроцедуры

Процедура СделатьКоммитВерсии(ДанныеВерсии)
	
	АвторКоммита = АвторИзСпискаАвторов(ДанныеВерсии.Автор, ПрочитатьФайл(Параметры["ФайлАвторов"]));

	ГитРепозиторий = Новый ГитРепозиторий();
	ГитРепозиторий.УстановитьРабочийКаталог(Параметры["ОсновнойКаталог"]);
	ГитРепозиторий.ДобавитьФайлВИндекс(Параметры["ОсновнойКаталог"]);
	ГитРепозиторий.ПерейтиВВетку("develop");
	ГитРепозиторий.Закоммитить(СообщениеКоммита(ДанныеВерсии), , , АвторКоммита, 
	ДанныеВерсии.Дата, АвторКоммита, ДанныеВерсии.Дата);
	Логирование.ЗаписатьСтрокуЛога("Коммит добавлен");
	Логирование.УменьшитьУровень();
	
КонецПроцедуры

Функция ПрочитатьФайл(АдресФайла)

	ЧтениеТекста = Новый ЧтениеТекста();
	ЧтениеТекста.Открыть(АдресФайла);
	ТекстФайла = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Возврат ТекстФайла;

КонецФункции

Функция СообщениеКоммита(ДанныеВерсии)

	Возврат ?(ЗначениеЗаполнено(ДанныеВерсии.Комментарий), 
	СтрШаблон("№%1%2%3", ДанныеВерсии.Номер, Символы.ПС, ДанныеВерсии.Комментарий), 
	СтрШаблон("№%1", ДанныеВерсии.Номер));
	
КонецФункции

Функция АвторИзСпискаАвторов(Автор, ТекстСпискаАвторов)

	ПозицияНачалаАвтора = СтрНайти(ТекстСпискаАвторов, Автор);
	Если ПозицияНачалаАвтора = 0 Тогда
		Сообщить(СтрШаблон("В файле AUTHORS в корне конфигурации нет строки с автором %1", Автор));
		Возврат "";
	КонецЕсли;

	ОбрезокТекста = Прав(ТекстСпискаАвторов, СтрДлина(ТекстСпискаАвторов) - ПозицияНачалаАвтора - СтрДлина(Автор));
	АвторКоммита = Лев(ОбрезокТекста, СтрНайти(ОбрезокТекста, Символы.ПС) - 1);
	
	Возврат АвторКоммита;

КонецФункции

Процедура ЗаписатьИнформациюОНовойВерсии(НоваяВерсия)

	ТекстСНомеромВерсии = ПрочитатьФайл(Параметры["ФайлВерсии"]);

	ТекстСНомеромВерсии = СтрЗаменить(ТекстСНомеромВерсии, НомерТекущейВерсии(), НоваяВерсия);
	ЗаписьТекста = Новый ЗаписьТекста(Параметры["ФайлВерсии"]);
	ЗаписьТекста.Записать(ТекстСНомеромВерсии);
	ЗаписьТекста.Закрыть();
	Логирование.ЗаписатьСтрокуЛога("Файл версии обновлен");
	
КонецПроцедуры

Процедура ОбработатьИсключение(ТекстОшибки)

	Логирование.УвеличитьУровень();
	Логирование.ЗаписатьСтрокуЛога(ТекстОшибки);
	Логирование.УменьшитьУровень();
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("Произошла ошибка!");	

КонецПроцедуры

ПрочитатьПараметрыИзФайла();

Попытка

	ИнициализироватьЛог();
	УстановитьКонтекстКонфигурации();
	ВыполнитьСинхронизациюГИТ();

Исключение

	ОбработатьИсключение(ОписаниеОшибки());

КонецПопытки;