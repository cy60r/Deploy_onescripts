#Использовать ReadParams
#Использовать v8rac
#Использовать v8runner
#Использовать v8storage
#Использовать Tlog
#Использовать TMail

Перем Конфигуратор;
Перем УправлениеКластером;
Перем Параметры;
Перем Логирование;

Процедура ПрочитатьПараметрыИзФайла()

	УстановитьТекущийКаталог("C:\scripts\ActualizeCopy");
	Параметры = ЧтениеПараметров.Прочитать(ОбъединитьПути(ТекущийКаталог(), "ActualizeCopy.json"));

КонецПроцедуры

Процедура ИнициализироватьЛог()
	
	Логирование = Новый ТУправлениеЛогированием();
	Логирование.ДатаВремяВКаждойСтроке = Истина;
	Логирование.ВыводитьСообщенияПриЗаписи = Истина; 
	Логирование.СоздатьФайлЛога(Параметры["ИмяЛога"], Параметры["КаталогЛога"]);
	Логирование.ЗаписатьСтрокуЛога("Начало актуализации базы");
	Логирование.УвеличитьУровень();

КонецПроцедуры

Процедура ОтключитьПользователейИБ()

	ПодключитьУправлениеКластером();
	УправлениеКластером.ОтключитьСеансыИнформационнойБазы(Параметры["ИмяБазы"]);
	Логирование.ЗаписатьСтрокуЛога("Сеансы отключены");

КонецПроцедуры

Процедура ОтключитьСоединенияИнформационнойБазы()

	УправлениеКластером.ОтключитьСоединенияИнформационнойБазы(Параметры["ИмяБазы"]);
	Логирование.ЗаписатьСтрокуЛога("Соединения отключены");	

КонецПроцедуры

Процедура ПодключитьУправлениеКластером()
	
	УправлениеКластером = Новый УправлениеКластером;
	УправлениеКластером.УстановитьКластер(Параметры["ИмяСервераКластера"]);
	УправлениеКластером.ИспользоватьВерсию(Параметры["ВерсияПлатформы"]);
	УправлениеКластером.УстановитьАвторизациюКластера(Параметры["ПользовательКластера"], Параметры["ПарольКластера"]);
	УправлениеКластером.Подключить();
	Логирование.ЗаписатьСтрокуЛога("Управление кластером подключено");

КонецПроцедуры

Процедура УстановитьКонтекстКонфигурации()

	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.УстановитьКонтекст("/S" + Параметры["ИмяСервера"] + "\" + Параметры["ИмяБазы"], Параметры["ПользовательИБ"], Параметры["ПарольИБ"]);
	Логирование.ЗаписатьСтрокуЛога("Информационная база подключена");

КонецПроцедуры

Процедура ВыгрузитьКонфигурациюДоОбновления()

	ИмяФайлаВыгрузки = ИмяФайлаВыгрузкиКонфигурации();
	Конфигуратор.ВыгрузитьКонфигурациюВФайл(ИмяФайлаВыгрузки);
	Логирование.ЗаписатьСтрокуЛога("Конфигурация базы выгружена");
	
КонецПроцедуры

Функция ИмяФайлаВыгрузкиКонфигурации()
	
	Возврат СокрЛП(Параметры["КаталогАрхива"]) + "\" + Формат(ТекущаяДата(), "ДФ=ddMMyyyy") + ".cf"

КонецФункции

Процедура ПолучитьКонфигурациюХранилища()

	// ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации(, Конфигуратор);
	// ХранилищеКонфигурации.УстановитьПараметрыАвторизации(Параметры["ПользовательХранилища"], Параметры["ПарольХранилища"]);
	// ХранилищеКонфигурации.УстановитьПутьКХранилищу(Параметры["ПутьКХранилишу"]);
	// ХранилищеКонфигурации.ОбновитьКонфигурациюНаВерсию();
	// Логирование.ЗаписатьСтрокуЛога("Получена конфигурация хранилища");

	Конфигуратор.ОбновитьКонфигурациюБазыДанныхИзХранилища(Параметры["ПутьКХранилишу"], Параметры["ПользовательХранилища"], Параметры["ПарольХранилища"]);
	Логирование.ЗаписатьСтрокуЛога("Конфигурация обновлена");

КонецПроцедуры

Процедура ОтправитьИзмененияКонфигурации()
	
	УправлениеЭП = Новый ТУправлениеЭлектроннойПочтой();

	УчетнаяЗаписьЭП = УправлениеЭП.УчетнаяЗаписьЭП;
	УчетнаяЗаписьЭП.АдресSMTP 			= Параметры["АдресSMTP"];
	УчетнаяЗаписьЭП.ПользовательSMTP 	= Параметры["ПользовательSMTP"];
	УчетнаяЗаписьЭП.ПарольSMTP 			= Параметры["ПарольSMTP"];
	УчетнаяЗаписьЭП.ПортSMTP 			= Параметры["ПортSMTP"];
	
	СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
	СтруктураСообщения.АдресЭлектроннойПочтыПолучателя = Параметры["АдресПолучателя"];
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + "ОтчетОСравнении.txt";
	СравнитьФайлВыгрузкиСТекущейВерсией(ИмяВременногоФайла);
	
	СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
	СтруктураСообщения.Вложения = ИмяВременногоФайла;
	СтруктураСообщения.АдресЭлектроннойПочтыОтправителя = УправлениеЭП.УчетнаяЗаписьЭП.ПользовательSMTP;
	СтруктураСообщения.ТемаСообщения = Параметры["ТемаСообщения"];
	СтруктураСообщения.ТипТекстаПочтовогоСообщения = "Строка";
	
	Если УправлениеЭП.ОтправитьСообщение() Тогда
		
		Логирование.ЗаписатьСтрокуЛога("Отчет о сравнении конфигураций отправлен");

	Иначе
		
		Логирование.ЗаписатьСтрокуЛога(УправлениеЭП.ТекстОшибки);

	КонецЕсли;

	УдалитьФайлы(ИмяВременногоФайла);

КонецПроцедуры

Процедура СравнитьФайлВыгрузкиСТекущейВерсией(ПутьКОтчету)
	
	ИмяФайлаВыгрузки = ИмяФайлаВыгрузкиКонфигурации();
	Конфигуратор.ПолучитьОтчетОСравненииКонфигурацииСФайлом(ИмяФайлаВыгрузки, ПутьКОтчету, 
	ТипыОтчетовОСравнении.Полный, "txt");
	Логирование.ЗаписатьСтрокуЛога("Отчет о сравнении конфигурации сформирован");

КонецПроцедуры

Процедура ОбработатьИсключение(ТекстОшибки)

	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("КРИТИЧЕСКАЯ ОШИБКА: " + ТекстОшибки);

КонецПроцедуры

ПрочитатьПараметрыИзФайла();
ИнициализироватьЛог();

Попытка

	ОтключитьПользователейИБ();
	ОтключитьСоединенияИнформационнойБазы();
	УстановитьКонтекстКонфигурации();
	ВыгрузитьКонфигурациюДоОбновления();
	ПолучитьКонфигурациюХранилища();
	ОтправитьИзмененияКонфигурации();
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("Окончание актуализации базы");

Исключение

	ОбработатьИсключение(ОписаниеОшибки())

КонецПопытки;