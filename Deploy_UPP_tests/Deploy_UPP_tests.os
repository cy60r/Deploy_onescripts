#Использовать ReadParams
#Использовать monitoring
#Использовать Tmail
#Использовать sql
#Использовать gitrunner
#Использовать xml-parser
#Использовать tempfiles
#Использовать 1commands
#Использовать Ext_v8runner
#Использовать Ext_v8storage

// Параметры из конфигурационного файла json
Перем Параметры;
// Мониторинг Zabbix
Перем Мониторинг;
// Подключение к конфигуратору
Перем Конфигуратор;
// Гит репозиторий
Перем ГитРепозиторий;
// Учетная запись электронной почты для отправки писем
Перем ИнтернетПочта;

#Область НачальныеНастройки

Процедура ПрочитатьПараметрыИзФайла()
	
	УстановитьТекущийКаталог("C:\scripts\Deploy_UPP_tests");
	Параметры = ЧтениеПараметров.Прочитать(ОбъединитьПути(ТекущийКаталог(), "Deploy_UPP_tests.json"));
	
КонецПроцедуры

Процедура ИнициализироватьМониторинг()

	Мониторинг = Новый УправлениеМониторингом();
	Мониторинг.УстановитьПараметрыМониторинга(Параметры["АдресZabbix"]);
	Мониторинг.УстановитьПараметрыЭлементаДанных(Параметры["УзелZabbix"], Параметры["КлючZabbix"]);
	Мониторинг.СоздатьФайлЛога(Параметры["ИмяЛога"], Параметры["КаталогЛога"]);
	Мониторинг.Информация("Начало запуска тестирования");
	Мониторинг.УвеличитьУровень();
	
КонецПроцедуры

Процедура ИнициализироватьПочту()
	
	ИнтернетПочта = Новый ТУправлениеЭлектроннойПочтой();
	
	УчетнаяЗаписьЭП = ИнтернетПочта.УчетнаяЗаписьЭП;
	УчетнаяЗаписьЭП.АдресSMTP = Параметры["АдресSMTP"];
	УчетнаяЗаписьЭП.ПортSMTP = 25;
	Мониторинг.Отладка("Электронная почта подключена");
	
КонецПроцедуры

Процедура УстановитьКонтекстКонфигурации()
		
	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.ИспользоватьВерсиюПлатформы(Параметры["ВерсияПлатформы"], РазрядностьПлатформы.x64x86);
	Конфигуратор.УстановитьКонтекст("/S" + Параметры["ИмяСервера"] + "\" + Параметры["ИмяБазы"],
		Параметры["ПользовательИБ"], Параметры["ПарольИБ"]);
	Мониторинг.Отладка("Контекст конфигуратора установлен");
	
КонецПроцедуры

#КонецОбласти

#Область ДымовыеТесты

Процедура ВыполнитьДымовыеТесты(Отказ) Экспорт
	
	Если Не Отказ Тогда
		
		ИмяФайлаОтчета = ИмяФайлаОтчетаТестирования();
		
		Команда = Новый Команда;
		ПараметрыВхода = СтрШаблон("/IBConnectionString Srvr=%1;Ref=%2 /N %3 /P %4",
				Параметры["ИмяСервера"], Параметры["ИмяБазы"], Параметры["ПользовательИБ"], Параметры["ПарольИБ"]);
		ПараметрОбработки = СтрШаблон("/Execute %1 /C """, Команда.ОбернутьВКавычки(Параметры["ОбработкаЗапускаТестов"]));
		ПараметрКонфига = СтрШаблон("xddConfig %1;", ДопПараметрОбработки(Параметры["ФайлКонфигурацииТестов"]));
		ПараметрКаталога = СтрШаблон("xddRun ЗагрузчикКаталога %1;", ДопПараметрОбработки(Параметры["КаталогТестов"]));
		ПараметрОтчета = СтрШаблон("xddReport ГенераторОтчетаMXL %1;", ДопПараметрОбработки(ИмяФайлаОтчета));
		ПараметрЗакрытия = СтрШаблон("%1;""", Параметры["ПараметрЗакрытия"]);
		
		Команда.УстановитьКоманду(Параметры["ПутьДляЗапуска1С"]);
		Команда.ДобавитьПараметр(Параметры["ПараметрПриложения"]);
		Команда.ДобавитьПараметр(ПараметрыВхода);
		Команда.ДобавитьПараметр(Параметры["ПараметрыЗапуска"]);
		Команда.ДобавитьПараметр(ПараметрОбработки);
		Команда.ДобавитьПараметр(ПараметрКонфига);
		Команда.ДобавитьПараметр(ПараметрКаталога);
		Команда.ДобавитьПараметр(ПараметрОтчета);
		Команда.ДобавитьПараметр(ПараметрЗакрытия);
		
		КодВозврата = Команда.Исполнить();
		Если КодВозврата = 0 Тогда
			
			Мониторинг.Отладка("Дымовые тесты выполнены");
			ТекстСообщения = ТекстСообщенияРезультатовТестов(ИмяФайлаОтчета);
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				
				ОтправитьОтчетТестирования(ТекстСообщения, ИмяФайлаОтчета);
				
			Иначе
				
				УдалитьФайлы(ИмяФайлаОтчета);
				
			КонецЕсли;
			
		Иначе
			
			Мониторинг.Ошибка("Ошибка выполнения дымовых тестов");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяФайлаОтчетаТестирования()
	
	НаименованиеФайла = Формат(ТекущаяДата(), "ДФ=dd_MM_yyyy_ЧЧ_мм_сс") + "_smoke_report.txt";
	ИмяФайла = ОбъединитьПути(Параметры["КаталогЛоговТестов"], НаименованиеФайла);
	НовыйТекстовыйФайл = Новый ТекстовыйДокумент();
	НовыйТекстовыйФайл.Записать(ИмяФайла);
	Возврат ИмяФайла;
	
КонецФункции

Функция ДопПараметрОбработки(Знач Строка) Экспорт
	
	Пока СтрНайти(Строка, "/") <> 0 Цикл
		
		Строка = СтрЗаменить(Строка, "/", "\");
		
	КонецЦикла;
	
	Возврат """""" + Строка + """""";
	
КонецФункции

Функция ТекстСообщенияРезультатовТестов(ИмяФайла)
	
	ТекстовыйФайл = Новый ЧтениеТекста(ИмяФайла);
	Сообщение = ТекстовыйФайл.ПрочитатьСтроку();
	ТекстовыйФайл.Закрыть();
	
	Возврат Сообщение;
	
КонецФункции

#КонецОбласти

#Область ИнтернетПочта

Процедура ОтправитьОтчетТестирования(ТекстСообщения, ИмяФайлаОтчета)
	
	СтруктураСообщения = ИнтернетПочта.СтруктураСообщения;
	СтруктураСообщения.АдресЭлектроннойПочтыПолучателя = Параметры["АдресПолучателя"];
	
	СтруктураСообщения = ИнтернетПочта.СтруктураСообщения;
	СтруктураСообщения.АдресЭлектроннойПочтыОтправителя = Параметры["АдресОтправителя"];
	СтруктураСообщения.ТемаСообщения = Параметры["ТемаПисьмаТесты"];
	
	СтруктураСообщения.ТипТекстаПочтовогоСообщения = "Строка";
	СтруктураСообщения.Вставить("ТекстСообщения", ТекстСообщения);
	
	СтруктураСообщения.Вложения = ИмяФайлаОтчета;
	
	Если ИнтернетПочта.ОтправитьСообщение() Тогда
		
		Мониторинг.Отладка("Ошибки дымовых тестов отправлены");
		
	Иначе
		
		Мониторинг.УвеличитьУровень();
		Мониторинг.Внимание(ИнтернетПочта.ТекстОшибки);
		Мониторинг.Ошибка("Ошибка при отправке письма о выполнении дымовых тестов");
		Мониторинг.УменьшитьУровень();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаключительныеОперации

Процедура ЗавершитьВыполнение(Отказ)
			
	Мониторинг.УстановитьНулевойУровень();

	Если Не Отказ Тогда

		Мониторинг.Информация("Тестирование завершено");

	Иначе

		Мониторинг.Информация("Во время тестирования произошла ошибка!");

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИсключение(ТекстОшибки)
	
	Мониторинг.УвеличитьУровень();
	Мониторинг.Внимание(ТекстОшибки);
	Мониторинг.УстановитьНулевойУровень();
	Мониторинг.КритическаяОшибка("Во время деплоя произошла ошибка!");
	Мониторинг.Информация("Тестирование остановлено из-за ошибки!");
	
КонецПроцедуры

#КонецОбласти

ПрочитатьПараметрыИзФайла();
ИнициализироватьМониторинг();
ИнициализироватьПочту();
Отказ = Ложь;

Попытка

	УстановитьКонтекстКонфигурации();

	ВыполнитьДымовыеТесты(Отказ);
	
	ЗавершитьВыполнение(Отказ);
	
Исключение
	
	ОбработатьИсключение(ОписаниеОшибки());
	
КонецПопытки;