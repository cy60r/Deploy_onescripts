#Использовать ReadParams
#Использовать v8runner
#Использовать Tlog
#Использовать TMail

Перем Параметры;
Перем Логирование;
Перем Конфигуратор;

Процедура ПрочитатьПараметрыИзФайла()

	УстановитьТекущийКаталог("C:\scripts\PrepareCopy");
	Параметры = ЧтениеПараметров.Прочитать(ОбъединитьПути(ТекущийКаталог(), "config.json"));

КонецПроцедуры

Процедура ИнициализироватьЛог()
	
	Логирование = Новый ТУправлениеЛогированием();
	Логирование.ДатаВремяВКаждойСтроке = Истина;
	Логирование.ВыводитьСообщенияПриЗаписи = Истина; 
	Логирование.СоздатьФайлЛога(Параметры["ИмяЛога"], Параметры["КаталогЛога"]);
	Логирование.ЗаписатьСтрокуЛога("Начало подготовки копии");
	Логирование.УвеличитьУровень();

КонецПроцедуры

Процедура УстановитьКонтекстКонфигурации()

	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.УстановитьКонтекст("/S" + Параметры["ИмяСервера"] + "\" + Параметры["ИмяБазы"], 
	Параметры["ПользовательИБ"], Параметры["ПарольИБ"]);
	Логирование.ЗаписатьСтрокуЛога("Информационная база подключена");

КонецПроцедуры

Процедура ОтключитьХранилище()

	Конфигуратор.ОтключитьсяОтХранилища();
	Логирование.ЗаписатьСтрокуЛога("Хранилище отключено");		

КонецПроцедуры

Процедура ПодключитьХранилище()
	
	Конфигуратор.ПодключитьсяКХранилищу(Параметры["ПутьКХранилищу"], 
	Параметры["ПользовательХранилища"], Параметры["ПарольХранилища"], Истина, Истина);
	Логирование.ЗаписатьСтрокуЛога("Хранилище подключено");

КонецПроцедуры

Процедура ОбновитьКонфигурацию()

	Конфигуратор.ОбновитьКонфигурациюБазыДанных();
	Логирование.ЗаписатьСтрокуЛога("Конфигурация обновлена");

КонецПроцедуры

Процедура ЗавершитьВыполнение()

	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("Копия подготовлена");

КонецПроцедуры

Процедура ОбработатьИсключение(ТекстОшибки)
	
	Логирование.УвеличитьУровень();
	Логирование.ЗаписатьСтрокуЛога(ТекстОшибки);
	Логирование.УменьшитьУровень();
	ОтправитьПисьмоОбОшибке(ТекстОшибки);
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("Во время подготовки произошла ошибка!");

КонецПроцедуры

Процедура ОтправитьПисьмоОбОшибке(ТекстОшибки)

	УправлениеЭП = Новый ТУправлениеЭлектроннойПочтой();

	УчетнаяЗаписьЭП = УправлениеЭП.УчетнаяЗаписьЭП;
	УчетнаяЗаписьЭП.АдресSMTP 			= Параметры["АдресSMTP"];
	УчетнаяЗаписьЭП.ПользовательSMTP 	= Параметры["ПользовательSMTP"];
	УчетнаяЗаписьЭП.ПарольSMTP 			= Параметры["ПарольSMTP"];
	УчетнаяЗаписьЭП.ПортSMTP 			= Параметры["ПортSMTP"];
	
	СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
	СтруктураСообщения.АдресЭлектроннойПочтыПолучателя = Параметры["АдресПолучателяОшибки"];
		
	СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
	СтруктураСообщения.АдресЭлектроннойПочтыОтправителя = УправлениеЭП.УчетнаяЗаписьЭП.ПользовательSMTP;
	СтруктураСообщения.ТемаСообщения = "Произошла ошибка при подготовке копии";

	СтруктураСообщения.ТипТекстаПочтовогоСообщения = "Строка";
	СтруктураСообщения.Вставить("ТекстСообщения", ТекстОшибки);
	
	Если УправлениеЭП.ОтправитьСообщение() Тогда
		
		Логирование.ЗаписатьСтрокуЛога("Письмо об ошибке отправлено");

	Иначе
		
		Логирование.УвеличитьУровень();
		Логирование.ЗаписатьСтрокуЛога(УправлениеЭП.ТекстОшибки);
		Логирование.УменьшитьУровень();

	КонецЕсли;	
	
КонецПроцедуры

ПрочитатьПараметрыИзФайла();
ИнициализироватьЛог();

Попытка
	
	УстановитьКонтекстКонфигурации();
	ОтключитьХранилище();
	ПодключитьХранилище();
	ОбновитьКонфигурацию();

	ЗавершитьВыполнение();

Исключение

	ОбработатьИсключение(ОписаниеОшибки());

КонецПопытки;