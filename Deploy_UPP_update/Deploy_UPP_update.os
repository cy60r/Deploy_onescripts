#Использовать ReadParams
#Использовать monitoring
#Использовать Tmail
#Использовать sql
#Использовать xml-parser
#Использовать tempfiles
#Использовать 1commands
#Использовать Ext_v8runner
#Использовать Ext_v8storage
#Использовать Ext_v8rac

// Параметры из конфигурационного файла json
Перем Параметры;
// Мониторинг Zabbix
Перем Мониторинг;
// Подключение к кластеру
Перем УправлениеКластером;
// Подключение к конфигуратору
Перем Конфигуратор;
// Гит репозиторий
Перем ГитРепозиторий;
// Учетная запись электронной почты для отправки писем
Перем ИнтернетПочта;

#Область НачальныеНастройки

Процедура ПрочитатьПараметрыИзФайла()
	
	УстановитьТекущийКаталог("C:\scripts\Deploy_UPP_update");
	Параметры = ЧтениеПараметров.Прочитать(ОбъединитьПути(ТекущийКаталог(), "Deploy_UPP_update.json"));
	
КонецПроцедуры

Процедура ИнициализироватьМониторинг()

	Мониторинг = Новый УправлениеМониторингом();
	Мониторинг.УстановитьПараметрыМониторинга(Параметры["АдресZabbix"]);
	Мониторинг.УстановитьПараметрыЭлементаДанных(Параметры["УзелZabbix"], Параметры["КлючZabbix"]);
	Мониторинг.СоздатьФайлЛога(Параметры["ИмяЛога"], Параметры["КаталогЛога"]);
	Мониторинг.Информация("Начало подготовки копии");
	Мониторинг.УвеличитьУровень();
	
КонецПроцедуры

Процедура ИнициализироватьПочту()

	ИнтернетПочта = Новый ТУправлениеЭлектроннойПочтой();

	УчетнаяЗаписьЭП = ИнтернетПочта.УчетнаяЗаписьЭП;
	УчетнаяЗаписьЭП.АдресSMTP 			= Параметры["АдресSMTP"];
	УчетнаяЗаписьЭП.ПортSMTP 			= 25;
	Мониторинг.Отладка("Электронная почта подключена");

КонецПроцедуры

Процедура УстановитьКонтекстКонфигурации()
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.ИспользоватьВерсиюПлатформы(Параметры["ВерсияПлатформы"], РазрядностьПлатформы.x64x86);
	Конфигуратор.УстановитьКонтекст("/S" + Параметры["ИмяСервера"] + "\" + Параметры["ИмяБазы"],
		Параметры["ПользовательИБ"], Параметры["ПарольИБ"]);
	Мониторинг.Отладка("Информационная база подключена");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКластером

Процедура ПодключитьУправлениеКластером()
	
	УправлениеКластером = Новый УправлениеКластером;
	УправлениеКластером.УстановитьКластер(Параметры["ИмяСервераКластера"]);
	УправлениеКластером.ИспользоватьВерсию(Параметры["ВерсияПлатформы"]);
	УправлениеКластером.Подключить();
	Мониторинг.Отладка("Управление кластером подключено");

КонецПроцедуры

Процедура ОтключитьПользователейИБ()

	УправлениеКластером.ОтключитьСеансыИнформационнойБазы(Параметры["ИмяБазы"]);
	Мониторинг.Отладка("Сеансы отключены");

КонецПроцедуры

Процедура ОтключитьСоединенияИнформационнойБазы()

	УправлениеКластером.ОтключитьСоединенияИнформационнойБазы(Параметры["ИмяБазы"]);
	Мониторинг.Отладка("Соединения отключены");	

КонецПроцедуры

#КонецОбласти

#Область РаботаСХранилищем

Процедура ОтключитьХранилище(Отказ)
	
	Если Не Отказ Тогда
		
		Конфигуратор.ОтключитьсяОтХранилища();
		Мониторинг.Отладка("Хранилище отключено");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьХранилище(Отказ, ПутьКХранилищу)
	
	Если Не Отказ Тогда
		
		Конфигуратор.ПодключитьсяКХранилищу(ПутьКХранилищу,
			Параметры["ПользовательХранилища"], Параметры["ПарольХранилища"], Истина, Истина);
		Мониторинг.Отладка("Хранилище " + ПутьКХранилищу + " подключено");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССУБД

Процедура ОчиститьТаблицы(Отказ)
	
	Если Не Отказ Тогда
		
		Соединение = Новый Соединение();
		Соединение.ТипСУБД 			= Соединение.ТипыСУБД.MSSQLServer;
		Соединение.Сервер 			= Параметры["ИмяСервераSQL"];
		Соединение.ИмяБазы 			= Параметры["ИмяБазыSQL"];
		Соединение.ИмяПользователя 	= Параметры["ИмяПользователяSQL"];
		Соединение.Пароль 			= Параметры["ПарольSQL"];
		Если Соединение.Открыть() Тогда
		
			Для каждого Таблица Из Параметры["ТаблицыДляОчистки"] Цикл
			
				Запрос = Новый Запрос();
				Запрос.УстановитьСоединение(Соединение);
				Запрос.Текст = "TRUNCATE TABLE " + Таблица + ";";
				Запрос.ВыполнитьКоманду();	

			КонецЦикла;
		
			Мониторинг.Отладка("Небходимые таблицы очищены");

		Иначе
			
			Отказ = Истина;
			Мониторинг.КритическаяОшибка("Не удалось подключиться к SQL");

		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область РаботасКонфигураций

Процедура ОбновитьКонфигурацию(Отказ)
	
	Если Не Отказ Тогда

		Конфигуратор.ОбновитьКонфигурациюБазыДанныхНаСервере();
		Мониторинг.Отладка("Конфигурация обновлена");

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДымовыеТесты

Процедура ВыполнитьДымовыеТесты()

	ИмяФайлаОтчета = ИмяФайлаОтчетаТестирования();

	Команда = Новый Команда;
	ПараметрыВхода 		= СтрШаблон("/IBConnectionString Srvr=%1;Ref=%2 /N %3 /P %4", 
	Параметры["ИмяСервера"], Параметры["ИмяБазы"], Параметры["ПользовательИБ"], Параметры["ПарольИБ"]);
	ПараметрОбработки 	= СтрШаблон("/Execute %1 /C """, Команда.ОбернутьВКавычки(Параметры["ОбработкаЗапускаТестов"]));
	ПараметрКонфига 	= СтрШаблон("xddConfig %1;", ДопПараметрОбработки(Параметры["ФайлКонфигурацииТестов"]));
	ПараметрКаталога 	= СтрШаблон("xddRun ЗагрузчикКаталога %1;", ДопПараметрОбработки(Параметры["КаталогТестов"]));
	ПараметрОтчета 		= СтрШаблон("xddReport ГенераторОтчетаMXL %1;", ДопПараметрОбработки(ИмяФайлаОтчета));
	ПараметрЗакрытия 	= СтрШаблон("%1;""", Параметры["ПараметрЗакрытия"]);
	
	Команда.УстановитьКоманду(Параметры["ПутьДляЗапуска1С"]);
	Команда.ДобавитьПараметр(Параметры["ПараметрПриложения"]);
	Команда.ДобавитьПараметр(ПараметрыВхода);
	Команда.ДобавитьПараметр(Параметры["ПараметрыЗапуска"]);
	Команда.ДобавитьПараметр(ПараметрОбработки);
	Команда.ДобавитьПараметр(ПараметрКонфига);
	Команда.ДобавитьПараметр(ПараметрКаталога);
	Команда.ДобавитьПараметр(ПараметрОтчета);
	Команда.ДобавитьПараметр(ПараметрЗакрытия);
	
	КодВозврата = Команда.Исполнить();
	Если КодВозврата = 0 Тогда
	
		Мониторинг.Отладка("Дымовые тесты выполнены");
		ТекстСообщения = ТекстСообщенияФайла(ИмяФайлаОтчета);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		
			ОтправитьОтчетТестирования(ТекстСообщения, ИмяФайлаОтчета);	

		Иначе

			УдалитьФайлы(ИмяФайлаОтчета);

		КонецЕсли;
	
	Иначе
	
		Мониторинг.Ошибка("Ошибка выполнение дымовых тестов");
	
	КонецЕсли;	
	
КонецПроцедуры

Функция ИмяФайлаОтчетаТестирования()
	
	НаименованиеФайла = Формат(ТекущаяДата(), "ДФ=dd_MM_yyyy_ЧЧ_мм_сс") + "_smoke_report.txt";
	ИмяФайла = ОбъединитьПути(Параметры["КаталогЛоговТестов"], НаименованиеФайла);
	НовыйТекстовыйФайл = Новый ТекстовыйДокумент();
	НовыйТекстовыйФайл.Записать(ИмяФайла);
	Возврат ИмяФайла;

КонецФункции

Функция ТекстСообщенияФайла(ИмяФайла)

	ТекстовыйФайл = Новый ЧтениеТекста(ИмяФайла);
	Сообщение = ТекстовыйФайл.ПрочитатьСтроку();
	ТекстовыйФайл.Закрыть();
	
	Возврат Сообщение;
	
КонецФункции

Функция ДопПараметрОбработки(Знач Строка) Экспорт

	Пока СтрНайти(Строка, "/") <> 0 Цикл
	
		Строка = СтрЗаменить(Строка, "/", "\");

	КонецЦикла;

	Возврат """""" + Строка + """""";

КонецФункции

#КонецОбласти

#Область ИнтернетПочта

Процедура ОтправитьОтчетТестирования(ТекстСообщения, ИмяФайлаОтчета)
	
	СтруктураСообщения = ИнтернетПочта.СтруктураСообщения;
	СтруктураСообщения.АдресЭлектроннойПочтыПолучателя = Параметры["АдресПолучателя"];
		
	СтруктураСообщения = ИнтернетПочта.СтруктураСообщения;
	СтруктураСообщения.АдресЭлектроннойПочтыОтправителя = Параметры["АдресОтправителя"];
	СтруктураСообщения.ТемаСообщения = Параметры["ТемаПисьмаТесты"];
	
	СтруктураСообщения.ТипТекстаПочтовогоСообщения = "Строка";
	СтруктураСообщения.Вставить("ТекстСообщения", ТекстСообщения);
	
	СтруктураСообщения.Вложения = ИмяФайлаОтчета;

	Если ИнтернетПочта.ОтправитьСообщение() Тогда
			
		Мониторинг.Отладка("Ошибки дымовых тестов отправлены");
	
	Иначе
		
		Мониторинг.УвеличитьУровень();
		Мониторинг.Внимание(ИнтернетПочта.ТекстОшибки);
		Мониторинг.Ошибка("Ошибка при отправке письма о выполнении дымовых тестов");
		Мониторинг.УменьшитьУровень();
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаключительныеОперации

Процедура ЗавершитьВыполнение(Отказ)
			
	Мониторинг.УстановитьНулевойУровень();

	Если Не Отказ Тогда

		Мониторинг.Информация("Копия подготовлена успешно");

	Иначе

		Мониторинг.Информация("Во время подготовки копии произошла ошибка!");

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИсключение(ТекстОшибки)
	
	Мониторинг.УвеличитьУровень();
	Мониторинг.Внимание(ТекстОшибки);
	Мониторинг.УстановитьНулевойУровень();
	Мониторинг.КритическаяОшибка("Во время деплоя произошла ошибка!");
	Мониторинг.Информация("Деплой остановлен из-за ошибки!");
	
КонецПроцедуры

#КонецОбласти

ПрочитатьПараметрыИзФайла();
ИнициализироватьМониторинг();
ИнициализироватьПочту();
Отказ = Ложь;

Попытка
	
	ПодключитьУправлениеКластером();
	ОтключитьПользователейИБ();
	ОтключитьСоединенияИнформационнойБазы();

	УстановитьКонтекстКонфигурации();
	
	// Подключаем хранилище UPP_work
	ОтключитьХранилище(Отказ);
	ПодключитьХранилище(Отказ, Параметры["РабочееХранилище"]);
	ОбновитьКонфигурацию(Отказ);

	// Запуск дымовых тестов
	ВыполнитьДымовыеТесты();
		
	// Подключаем хранилище UPP
	ОтключитьХранилище(Отказ);
	ПодключитьХранилище(Отказ, Параметры["ХранилищеРазработки"]);
		
	// Подготавливаем и обновляем конфигурацию
	ОчиститьТаблицы(Отказ);
	ОбновитьКонфигурацию(Отказ);
	
	ЗавершитьВыполнение(Отказ);
	
Исключение
	
	ОбработатьИсключение(ОписаниеОшибки());
	
КонецПопытки;