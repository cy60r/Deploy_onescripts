#Использовать ReadParams
#Использовать monitoring
#Использовать Tmail
#Использовать sql
#Использовать xml-parser
#Использовать tempfiles
#Использовать 1commands
#Использовать Ext_v8runner
#Использовать Ext_v8storage
#Использовать Ext_v8rac

// Параметры из конфигурационного файла json
Перем Параметры;
// Мониторинг Zabbix
Перем Мониторинг;
// Подключение к кластеру
Перем УправлениеКластером;
// Подключение к конфигуратору
Перем Конфигуратор;
// Гит репозиторий
Перем ГитРепозиторий;

#Область НачальныеНастройки

Процедура ПрочитатьПараметрыИзФайла()
	
	УстановитьТекущийКаталог("C:\scripts\Deploy_UPP_update");
	Параметры = ЧтениеПараметров.Прочитать(ОбъединитьПути(ТекущийКаталог(), "Deploy_UPP_update.json"));
	
КонецПроцедуры

Процедура ИнициализироватьМониторинг()
	
	Мониторинг = Новый УправлениеМониторингом();
	Мониторинг.УстановитьПараметрыМониторинга(Параметры["АдресZabbix"]);
	Мониторинг.УстановитьПараметрыЭлементаДанных(Параметры["УзелZabbix"], Параметры["КлючZabbix"]);
	Мониторинг.СоздатьФайлЛога(Параметры["ИмяЛога"], Параметры["КаталогЛога"]);
	Мониторинг.Информация("Начало подготовки копии");
	Мониторинг.УвеличитьУровень();
	
КонецПроцедуры

Процедура УстановитьКонтекстКонфигурации()
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.ИспользоватьВерсиюПлатформы(Параметры["ВерсияПлатформы"], РазрядностьПлатформы.x64x86);
	Конфигуратор.УстановитьКонтекст("/S" + Параметры["ИмяСервера"] + "\" + Параметры["ИмяБазы"],
		Параметры["ПользовательИБ"], Параметры["ПарольИБ"]);
	Мониторинг.Отладка("Информационная база подключена");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКластером

Процедура ПодключитьУправлениеКластером()
	
	УправлениеКластером = Новый УправлениеКластером;
	УправлениеКластером.УстановитьКластер(Параметры["ИмяСервераКластера"]);
	УправлениеКластером.ИспользоватьВерсию(Параметры["ВерсияПлатформы"]);
	УправлениеКластером.Подключить();
	Мониторинг.Отладка("Управление кластером подключено");
	
КонецПроцедуры

Процедура ОтключитьПользователейИБ()
	
	УправлениеКластером.ОтключитьСеансыИнформационнойБазы(Параметры["ИмяБазы"]);
	Мониторинг.Отладка("Сеансы отключены");
	
КонецПроцедуры

Процедура ОтключитьСоединенияИнформационнойБазы()
	
	УправлениеКластером.ОтключитьСоединенияИнформационнойБазы(Параметры["ИмяБазы"]);
	Мониторинг.Отладка("Соединения отключены");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСХранилищем

Процедура ОтключитьХранилище(Отказ)
	
	Если Не Отказ Тогда
		
		Конфигуратор.ОтключитьсяОтХранилища();
		Мониторинг.Отладка("Хранилище отключено");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьХранилище(Отказ, ПутьКХранилищу)
	
	Если Не Отказ Тогда
		
		Конфигуратор.ПодключитьсяКХранилищу(ПутьКХранилищу,
			Параметры["ПользовательХранилища"], Параметры["ПарольХранилища"], Истина, Истина);
		Конфигуратор.ПолучитьВерсиюИзХранилища(ПутьКХранилищу,
		Параметры["ПользовательХранилища"], Параметры["ПарольХранилища"]);
		Мониторинг.Отладка("Хранилище " + ПутьКХранилищу + " подключено");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССУБД

Процедура ОчиститьТаблицы(Отказ)
	
	Если Не Отказ Тогда
		
		Соединение = Новый Соединение();
		Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
		Соединение.Сервер = Параметры["ИмяСервераSQL"];
		Соединение.ИмяБазы = Параметры["ИмяБазыSQL"];
		Соединение.ИмяПользователя = Параметры["ИмяПользователяSQL"];
		Соединение.Пароль = Параметры["ПарольSQL"];
		Если Соединение.Открыть() Тогда
			
			Для каждого Таблица Из Параметры["ТаблицыДляОчистки"] Цикл
				
				Запрос = Новый Запрос();
				Запрос.УстановитьСоединение(Соединение);
				Запрос.Текст = "TRUNCATE TABLE " + Таблица + ";";
				Запрос.ВыполнитьКоманду();
				
			КонецЦикла;
			
			Мониторинг.Отладка("Небходимые таблицы очищены");
			
		Иначе
			
			Отказ = Истина;
			Мониторинг.КритическаяОшибка("Не удалось подключиться к SQL");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботасКонфигураций

Процедура ОбновитьКонфигурацию(Отказ)
	
	Если Не Отказ Тогда
		
		Конфигуратор.ОбновитьКонфигурациюБазыДанныхНаСервере();
		Мониторинг.Отладка("Конфигурация обновлена");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДымовыеТесты

Процедура ЗапуститьДымовыеТесты()
	
	Мониторинг.Информация("Запуск дымовых тестов");
	ЗапуститьПриложение(Параметры["ДымовойТест"], , Истина);
	Мониторинг.Информация("Дымовые тесты выполнены");
	
КонецПроцедуры

#КонецОбласти

#Область ЗаключительныеОперации

Процедура ЗавершитьВыполнение(Отказ)
	
	Мониторинг.УстановитьНулевойУровень();
	
	Если Не Отказ Тогда
		
		Мониторинг.Информация("Копия подготовлена успешно");
		
	Иначе
		
		Мониторинг.Информация("Во время подготовки копии произошла ошибка!");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИсключение(ТекстОшибки)
	
	Мониторинг.УвеличитьУровень();
	Мониторинг.Внимание(ТекстОшибки);
	Мониторинг.УстановитьНулевойУровень();
	Мониторинг.КритическаяОшибка("Во время деплоя произошла ошибка!");
	Мониторинг.Информация("Деплой остановлен из-за ошибки!");
	
КонецПроцедуры

#КонецОбласти

ПрочитатьПараметрыИзФайла();
ИнициализироватьМониторинг();
Отказ = Ложь;

Попытка
	
	ПодключитьУправлениеКластером();
	ОтключитьПользователейИБ();
	ОтключитьСоединенияИнформационнойБазы();
	
	УстановитьКонтекстКонфигурации();
	
	// Подключаем хранилище UPP_work
	ОтключитьХранилище(Отказ);
	ПодключитьХранилище(Отказ, Параметры["РабочееХранилище"]);
	ОбновитьКонфигурацию(Отказ);
	
	// Дымовые тесты
	ЗапуститьДымовыеТесты();
	
	// Подключаем хранилище UPP
	ОтключитьХранилище(Отказ);
	ПодключитьХранилище(Отказ, Параметры["ХранилищеРазработки"]);
	
	// Подготавливаем и обновляем конфигурацию
	ОчиститьТаблицы(Отказ);
	ОбновитьКонфигурацию(Отказ);
	
	ЗавершитьВыполнение(Отказ);
	
Исключение
	
	ОбработатьИсключение(ОписаниеОшибки());
	
КонецПопытки;