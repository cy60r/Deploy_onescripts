#Использовать cmdline
#Использовать ReadParams
#Использовать monitoring
#Использовать gitrunner
#Использовать v8rac
#Использовать crypto
#Использовать v8runner
#Использовать v8storage

// Параметры из конфигурационного файла json
Перем Параметры;
// Мониторинг
Перем Мониторинг;
// GIT
Перем ГитРепозиторий;
// Управление кластером
Перем УправлениеКластером;
// Управление конфигуратором
Перем Конфигуратор;

#Область НачальныеНастройки

Процедура ПрочитатьАргументы()
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	Парсер.ДобавитьИменованныйПараметр("--config");
	
	Аргументы = Парсер.Разобрать(АргументыКоманднойСтроки);
	
	Конфиг = Аргументы["--config"];
	
	// ТЕСТ
	Если Не ЗначениеЗаполнено(Конфиг) Тогда
		
		Конфиг = "A:/Скрипты/Dump_Extension/Dump_Extension_ZUP_Conv3.json";
		
	КонецЕсли;
	
	Параметры = ЧтениеПараметров.Прочитать(Конфиг);

	УстановитьТекущийКаталог(Параметры["КаталогЛога"]);
	
	РасшифроватьТокен();
	
КонецПроцедуры

Процедура РасшифроватьТокен()
	
	JWT = Новый JWT;
	
	РасшифрованныеДанные = JWT.Декодировать(Параметры["Токен"], Параметры["КлючТокена"]);
	
	Параметры.Вставить("ПользовательИБ", РасшифрованныеДанные.ПользовательИБ);
	Параметры.Вставить("ПарольИБ", РасшифрованныеДанные.ПарольИБ);
	
КонецПроцедуры

Процедура ИнициализироватьМониторинг()
	
	Мониторинг = Новый УправлениеМониторингом();
	Мониторинг.СоздатьФайлЛога(Параметры["ИмяЛога"], Параметры["КаталогЛога"]);
	
	ЗаголовокСкрипта = СтрШаблон("Начало выполнения дампа расширения %1 из базы %2",
			Параметры["ИмяРасширения"], Параметры["ИмяИБ"]);
	
	Мониторинг.Информация(ЗаголовокСкрипта);
	Мониторинг.УвеличитьУровень();
	
КонецПроцедуры

Процедура ИнициализироватьГит()
	
	ГитРепозиторий = Новый ГитРепозиторий();
	ГитРепозиторий.УстановитьРабочийКаталог(Параметры["ОсновнойКаталог"]);
	Мониторинг.Отладка("GIT репозиторий подключен");
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДампа

Процедура УстановитьКонтекстКонфигурации()
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.ИспользоватьВерсиюПлатформы(Параметры["ВерсияПлатформы"], РазрядностьПлатформы.x64x86);
	СтрокаСоединения = СтрШаблон("/S%1\%2", Параметры["ИмяСервера"], Параметры["ИмяИБ"]);
	Конфигуратор.УстановитьКонтекст(СтрокаСоединения, Параметры["ПользовательИБ"], Параметры["ПарольИБ"]);
	Мониторинг.Отладка("Контекст конфигурации базы установлен");
	
КонецПроцедуры

Процедура ПодключитьУправлениеКластером()
	
	УправлениеКластером = Новый УправлениеКластером;
	УправлениеКластером.УстановитьКластер(Параметры["ИмяСервераКластера"], Параметры["ПортКластера"]);
	УправлениеКластером.ИспользоватьВерсию(Параметры["ВерсияПлатформы"]);
	УправлениеКластером.Подключить();
	Мониторинг.Отладка("Управление кластером подключено");
	
КонецПроцедуры

Процедура ОтключитьПользователейКонфигуратора()
	
	Массив = Новый Массив;
	Массив.Добавить("Designer");
	Фильтр = Новый Структура("Приложение", Массив);
	
	УправлениеКластером.ОтключитьСеансыИнформационнойБазыПоФильтру(Параметры["ИмяИБ"], Фильтр);
	Мониторинг.Отладка("Сеансы конфигуратора отключены");
	
КонецПроцедуры

Процедура ПерейтиВВеткуГИТ(Отказ, ИмяВетки)
	
	Если Не Отказ Тогда
		
		ГитРепозиторий.ПерейтиВВетку(ИмяВетки, Ложь, Истина);
		СообщениеОтладки = СтрШаблон("Переход на ветку %1", ИмяВетки);
		Мониторинг.Отладка(СообщениеОтладки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Дамп

Процедура ВыгрузитьКонфигурациюРасширения()
	
	Конфигуратор.ВыгрузитьРасширениеВФайлы(Параметры["КаталогВыгрузки"], Параметры["ИмяРасширения"], "", Истина);
	Мониторинг.Отладка("Конфигурация расширения в файлы выгружена");
	
КонецПроцедуры

Процедура Закоммитить(Отказ)
	
	Если Не Отказ Тогда
		
		СтатусРепозитория = ТекущийСтатусРепозитория();
		
		Если ЗначениеЗаполнено(СтатусРепозитория) Тогда
			
			ГитРепозиторий.ДобавитьФайлВИндекс(Параметры["ОсновнойКаталог"]);
			СообщениеКоммита = СтрШаблон("autoupdate %1", Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"));
			ДатаКоммита = ТекущаяДата();
			ГитРепозиторий.Закоммитить(СообщениеКоммита, , , Параметры["АвторКоммита"],
				ДатаКоммита, Параметры["АвторКоммита"], ДатаКоммита);
			Мониторинг.Отладка("Коммит добавлен");

		Иначе
			
			Мониторинг.Отладка("Расширение не изменено");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекущийСтатусРепозитория()
	
	Возврат ГитРепозиторий.Статус(Истина);
	
КонецФункции

Процедура ЗавершитьВыполнение(Отказ)

	Если Отказ Тогда

		Мониторинг.УстановитьНулевойУровень();
		Мониторинг.КритическаяОшибка("Дамп выполнен с ошибками!");

	Иначе

		Мониторинг.УстановитьНулевойУровень();
		Мониторинг.Информация("Дамп выполнен");
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработкаИсключения

Процедура ОбработатьИсключение(ТекстОшибки)
	
	Мониторинг.УвеличитьУровень();
	Мониторинг.Внимание(ТекстОшибки);
	Мониторинг.УстановитьНулевойУровень();
	Мониторинг.КритическаяОшибка("Во время дампа произошла ошибка!");
	Мониторинг.Информация("Дамп остановлен из-за ошибки!");
	
КонецПроцедуры

#КонецОбласти

ПрочитатьАргументы();
ИнициализироватьМониторинг();
ИнициализироватьГит();

Отказ = Ложь;

Попытка
	
	УстановитьКонтекстКонфигурации();
	ПодключитьУправлениеКластером();
	ОтключитьПользователейКонфигуратора();
	
	ПерейтиВВеткуГИТ(Отказ, Параметры["Ветка"]);
	
	ВыгрузитьКонфигурациюРасширения();
	
	Закоммитить(Отказ);

	ЗавершитьВыполнение(Отказ);
	
Исключение
	
	ОбработатьИсключение(ОписаниеОшибки());
	
КонецПопытки;