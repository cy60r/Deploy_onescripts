#Использовать v8storage
#Использовать ReadParams
#Использовать Tlog

Перем Конфигуратор;
Перем Параметры;
Перем КаталогВыгрузки;
Перем Логирование;

Процедура ПрочитатьПараметрыИзФайла()

	УстановитьТекущийКаталог("C:\scripts\CheckStorageVersion");
	Параметры = ЧтениеПараметров.Прочитать(ОбъединитьПути(ТекущийКаталог(), "CheckStorageVersion.json"));

КонецПроцедуры

Процедура ИнициализироватьЛог()
	
	Логирование = Новый ТУправлениеЛогированием();
	Логирование.ДатаВремяВКаждойСтроке = Истина;
	Логирование.ВыводитьСообщенияПриЗаписи = Истина; 
	Логирование.СоздатьФайлЛога(Параметры["ИмяЛога"], Параметры["КаталогЛога"]);
	Логирование.ЗаписатьСтрокуЛога("Начало получения версий хранилища");
	Логирование.УвеличитьУровень();

КонецПроцедуры

Процедура УстановитьКонтекстКонфигурации()

	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.УстановитьКонтекст("/S" + Параметры["ИмяСервера"] + "\" + 
	Параметры["ИмяБазы"], Параметры["ПользовательИБ"], Параметры["ПарольИБ"]);
	Логирование.ЗаписатьСтрокуЛога("Информационная база подключена");

КонецПроцедуры

Процедура ПолучитьОтчетОВерсийХранилища()

	НомерВерсии = 3050;
	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации(, Конфигуратор);
	ХранилищеКонфигурации.УстановитьПутьКХранилищу(Параметры["ПутьКХранилищу"]);
	ХранилищеКонфигурации.УстановитьПараметрыАвторизации(Параметры["ПользовательХранилища"], 
	Параметры["ПарольХранилища"]);
	ТаблицаВерсий = ХранилищеКонфигурации.ПолучитьТаблицуВерсийСВерсии(НомерВерсии);

	МассивВерсий = Новый Массив();

	Для каждого Строка Из ТаблицаВерсий Цикл

		// Структура = Новый Структура();
		// Структура.Вставить("Номер", 		Строка.Номер);
		// Структура.Вставить("Дата", 			Строка.Дата);
		// Структура.Вставить("Автор", 		Строка.Автор);
		// Структура.Вставить("Комментарий", 	Строка.Комментарий);
		// МассивВерсий.Добавить(Структура);

		ВыгрузитьВИсходникиИнкрементно(СтрШаблон("%1\%2.cf", ПутьКПапкеВыгрузок, ПоследняяОбработаннаяВерсия));
		СделатьКоммитВерсии(ПоследняяОбработаннаяВерсия);
		ЗаписатьИнформациюОНовойВерсии(ПоследняяОбработаннаяВерсия);	
		
	КонецЦикла;
	
	Запись = Новый ЗаписьJSON;
	Запись.ОткрытьФайл(ОбъединитьПути(ТекущийКаталог(), "test.json"));
	
	Данные = Новый Структура;
	Данные.Вставить("Версии", МассивВерсий);
	ЗаписатьJSON(Запись, Данные);
	Запись.Закрыть();

	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("Отчет о версиях хранилища выгружен");

КонецПроцедуры

Процедура ВыгрузитьВИсходникиИнкрементно(ФайлВыгрузки)
	
	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();

	Конфигуратор = Новый УправлениеКонфигуратором();

	Конфигуратор.СоздатьФайловуюБазу(ВременныйКаталог);
	Конфигуратор.УстановитьКонтекст("/F" + ВременныйКаталог, "", "");
	Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлВыгрузки);

	Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();
	Параметры.Добавить("/DumpConfigToFiles");
	Параметры.Добавить("E:\erp_pmt\src\cf");
	Параметры.Добавить("-update");

	Конфигуратор.ВыполнитьКоманду(Параметры);
	РезультатВыполнения = Конфигуратор.ВыводКоманды();
	
    УдалитьФайлы(ВременныйКаталог);

КонецПроцедуры


Процедура ОбработатьИсключение(ТекстОшибки)

	Логирование.УвеличитьУровень();
	Логирование.ЗаписатьСтрокуЛога(ТекстОшибки);
	Логирование.УменьшитьУровень();
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("Произошла ошибка!");	

КонецПроцедуры

ПрочитатьПараметрыИзФайла();

Попытка

	ИнициализироватьЛог();
	УстановитьКонтекстКонфигурации();
	ПолучитьОтчетОВерсийХранилища();

Исключение

	ОбработатьИсключение(ОписаниеОшибки());

КонецПопытки;