#Использовать ReadParams
#Использовать Ext_v8runner
#Использовать Ext_v8storage
#Использовать Ext_v8rac
#Использовать Ext_TLog
#Использовать sql
#Использовать gitrunner
#Использовать xml-parser
#Использовать tempfiles
#Использовать 1commands

Перем Параметры; 			// Параметры из конфигурационного файла json
Перем Логирование; 			// История лога выполнения
Перем УправлениеКластером; 	// Подключение к кластеру
Перем Конфигуратор; 		// Подключение к конфигуратору
Перем ГитРепозиторий; 		// Гит репозиторий

#Область НачальныеНастройки

Процедура ПрочитатьПараметрыИзФайла()
	
	УстановитьТекущийКаталог("C:\scripts\Deploy_UPP_work");
	Параметры = ЧтениеПараметров.Прочитать(ОбъединитьПути(ТекущийКаталог(), "Deploy_UPP_work.json"));
	
КонецПроцедуры

Процедура ИнициализироватьЛог()
	
	Логирование = Новый ТУправлениеЛогированием();
	Логирование.ДатаВремяВКаждойСтроке = Истина;
	Логирование.ВыводитьСообщенияПриЗаписи = Истина;
	Логирование.СоздатьФайлЛога(Параметры["ИмяЛога"], Параметры["КаталогЛога"]);
	Логирование.ЗаписатьСтрокуЛога("Начало деплоя");
	Логирование.УвеличитьУровень();
	
КонецПроцедуры

Процедура УстановитьКонтекстКонфигурации()
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.УстановитьКонтекст("/S" + Параметры["ИмяСервера"] + "\" + Параметры["ИмяБазы"],
		Параметры["ПользовательИБ"], Параметры["ПарольИБ"]);
	Логирование.ЗаписатьСтрокуЛога("Информационная база подключена");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКластером

Процедура ПодключитьУправлениеКластером()
	
	УправлениеКластером = Новый УправлениеКластером;
	УправлениеКластером.УстановитьКластер(Параметры["ИмяСервераКластера"]);
	УправлениеКластером.ИспользоватьВерсию(Параметры["ВерсияПлатформы"]);
	УправлениеКластером.Подключить();
	Логирование.ЗаписатьСтрокуЛога("Управление кластером подключено");

КонецПроцедуры

Процедура ОтключитьПользователейИБ()

	УправлениеКластером.ОтключитьСеансыИнформационнойБазы(Параметры["ИмяБазы"]);
	Логирование.ЗаписатьСтрокуЛога("Сеансы отключены");

КонецПроцедуры

Процедура ОтключитьСоединенияИнформационнойБазы()

	УправлениеКластером.ОтключитьСоединенияИнформационнойБазы(Параметры["ИмяБазы"]);
	Логирование.ЗаписатьСтрокуЛога("Соединения отключены");	

КонецПроцедуры

#КонецОбласти

#Область РаботаСХранилищем
Функция ТаблицаВерсийХранилища(НомерНачальнойВерсии, ПутьКХранилищу)

	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации();
	ХранилищеКонфигурации.УстановитьПутьКХранилищу(ПутьКХранилищу);
	ХранилищеКонфигурации.УстановитьПараметрыАвторизации(Параметры["ПользовательХранилища"], 
	Параметры["ПарольХранилища"]);
	Логирование.ЗаписатьСтрокуЛога("Получена таблица версий");
	Возврат ХранилищеКонфигурации.ПолучитьТаблицуВерсийСВерсии(НомерНачальнойВерсии);

КонецФункции

#КонецОбласти

#Область РаботаСГИТ

Процедура ИнициализироватьГит()

	ГитРепозиторий = Новый ГитРепозиторий();
	ГитРепозиторий.УстановитьРабочийКаталог(Параметры["ОсновнойКаталог"]);
	Логирование.ЗаписатьСтрокуЛога("GIT репозиторий подключен");
	
КонецПроцедуры

Процедура ПерейтиВВеткуГИТ(Отказ, ИмяВетки)
	
	Если Не Отказ Тогда
		
		ГитРепозиторий.ПерейтиВВетку(ИмяВетки, Ложь, Истина);
		Логирование.ЗаписатьСтрокуЛога("Переход на ветку " + ИмяВетки);

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьДампКонфигурации(Отказ, ИмяВетки, Дамп)

	Если Не Отказ Тогда
		
		КопироватьФайл(Дамп, Параметры["ТекущийДампКонфигурации"]);
		Логирование.ЗаписатьСтрокуЛога("Установлен дамп конфигурации ветки " + ИмяВетки);

	КонецЕсли;

КонецПроцедуры

Процедура СохранитьДампКонфигурации(Отказ, ИмяВетки, Дамп)

	Если Не Отказ Тогда

		КопироватьФайл(Параметры["ТекущийДампКонфигурации"], Дамп);
		Логирование.ЗаписатьСтрокуЛога("Сохранен дамп конфигурации ветки " + ИмяВетки);

	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьДеплой(Отказ, КлючПроекта, ИмяВетки, Дамп, ПутьКХранилищу)

	Если Не Отказ Тогда

		НомерВерсии = НомерТекущейВерсии();
		ТаблицаВерсий = ТаблицаВерсийХранилища(Строка(Число(НомерВерсии) + 1), ПутьКХранилищу);
		ТекстФайлаАвторов = ПрочитатьФайл(ОбъединитьПути(Параметры["ОсновнойКаталог"], "AUTHORS"));

		Логирование.УвеличитьУровень();
		ОбработкиВыгружены = Ложь;

		Для каждого Строка Из ТаблицаВерсий Цикл

			Если Не Отказ Тогда

				НомерВерсии = Строка.Номер;
				ВыгрузитьВИсходникиИнкрементно(Отказ, НомерВерсии, ПутьКХранилищу);

				Если Не ОбработкиВыгружены Тогда
					
					ВыгрузитьВнешниеОбработки(Отказ);
					ОбработкиВыгружены = Истина;

				КонецЕсли;

				ЗаписатьИнформациюОНовойВерсии(Отказ, НомерВерсии);
				СделатьКоммитВерсии(Отказ, Строка, ТекстФайлаАвторов);
				ВыполнитьСканирование(Отказ, КлючПроекта, Строка.Автор);
				СохранитьДампКонфигурации(Отказ, ИмяВетки, Дамп);
				ОтправитьГИТ(Отказ);
				Логирование.УменьшитьУровень();

			Иначе

				Возврат;

			КонецЕсли;

		КонецЦикла;
		
		Логирование.УменьшитьУровень();

	КонецЕсли;

КонецПроцедуры

Функция НомерТекущейВерсии()
	
	Процессор = Новый СериализацияДанныхXML();
	РезультатЧтения = Процессор.ПрочитатьИзФайла(ОбъединитьПути(Параметры["ОсновнойКаталог"], "VERSION"));
	Возврат РезультатЧтения["VERSION"];

КонецФункции

Процедура ВыгрузитьВИсходникиИнкрементно(Отказ, НомерВерсии, ПутьКХранилищу)
	
	Если Не Отказ Тогда

		Логирование.ЗаписатьСтрокуЛога("Начало деплоя версии " + НомерВерсии);
		Логирование.УвеличитьУровень();
	
		ВременныйКаталог = Параметры["ВременныйКаталог"];
	
		ВременныйКонфигуратор = Новый УправлениеКонфигуратором();
	
		ВременныйКонфигуратор.СоздатьФайловуюБазу(ВременныйКаталог);
		ВременныйКонфигуратор.УстановитьКонтекст("/F" + ВременныйКаталог, "", "");
	
		ВременныйКонфигуратор.ЗагрузитьКонфигурациюИзХранилища(ПутьКХранилищу,
			Параметры["ПользовательХранилища"], Параметры["ПарольХранилища"], НомерВерсии);
		Логирование.ЗаписатьСтрокуЛога("Конфигурация версии загружена");
	
		ПараметрыКоманды = ВременныйКонфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыКоманды.Добавить("/DumpConfigToFiles");
		ПараметрыКоманды.Добавить(Параметры["КаталогВыгрузки"]);
		ПараметрыКоманды.Добавить("-update");
		ВременныйКонфигуратор.ВыполнитьКоманду(ПараметрыКоманды);
	
		Логирование.ЗаписатьСтрокуЛога("Файлы конфигурации версии выгружены");

		УдалитьФайлы(ВременныйКаталог);

	КонецЕсли;

КонецПроцедуры

Процедура СделатьКоммитВерсии(Отказ, ДанныеВерсии, ТекстФайлаАвторов)
	
	Если Не Отказ Тогда

		АвторКоммита = ЗначениеИзТекста(ДанныеВерсии.Автор, ТекстФайлаАвторов);

		Если Не ЗначениеЗаполнено(АвторКоммита) Тогда
			
			Отказ = Истина;
			ОбработатьИсключение("Не найден автор коммита!");
			Возврат;

		КонецЕсли;

		ГитРепозиторий.ДобавитьФайлВИндекс(Параметры["ОсновнойКаталог"]);
		СообщениеКоммита = СообщениеКоммитаПоШаблону(ДанныеВерсии);
		ГитРепозиторий.Закоммитить(СообщениеКоммита, , , АвторКоммита, 
		ДанныеВерсии.Дата, АвторКоммита, ДанныеВерсии.Дата);
		Логирование.ЗаписатьСтрокуЛога("Коммит добавлен");

	КонецЕсли;
	
КонецПроцедуры

Функция СообщениеКоммитаПоШаблону(ДанныеВерсии)

	Возврат ?(ЗначениеЗаполнено(ДанныеВерсии.Комментарий), 
	СтрШаблон("№%1%2%3", ДанныеВерсии.Номер, Символы.ПС, ДанныеВерсии.Комментарий), 
	СтрШаблон("№%1", ДанныеВерсии.Номер));

КонецФункции

Процедура ЗаписатьИнформациюОНовойВерсии(Отказ, НоваяВерсия)

	Если Не Отказ Тогда

		ТекстСНомеромВерсии = ПрочитатьФайл(ОбъединитьПути(Параметры["ОсновнойКаталог"], "VERSION"));

		ТекстСНомеромВерсии = СтрЗаменить(ТекстСНомеромВерсии, НомерТекущейВерсии(), НоваяВерсия);
		ЗаписьТекста = Новый ЗаписьТекста(ОбъединитьПути(Параметры["ОсновнойКаталог"], "VERSION"));
		ЗаписьТекста.Записать(ТекстСНомеромВерсии);
		ЗаписьТекста.Закрыть();
		Логирование.ЗаписатьСтрокуЛога("Файл версии обновлен");

	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьГИТ(Отказ)
	
	Если Не Отказ Тогда
	
		НастройкаОтправить = Новый НастройкаКомандыОтправить;
		НастройкаОтправить.УстановитьURLРепозиторияОтправки(Параметры["АдресРепозитория"]);
		НастройкаОтправить.ОтображатьПрогресс();
		НастройкаОтправить.ПерезаписатьИсторию();
		НастройкаОтправить.ПолнаяОтправка();
		
		ГитРепозиторий.УстановитьРабочийКаталог(Параметры["ОсновнойКаталог"]);
		ГитРепозиторий.УстановитьНастройкуКомандыОтправить(НастройкаОтправить);
		
		ГитРепозиторий.Отправить();
		Логирование.ЗаписатьСтрокуЛога("Push выполнен");

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСонарСканера

Процедура ВыполнитьСканирование(Отказ, КлючПроекта, Пользователь)
	
	Если Не Отказ Тогда
	
		КомандныйФайл = Новый КомандныйФайл;
		КомандныйФайл.Создать();
	
		КомандныйФайл.ДобавитьКоманду(СтрШаблон("%1:", Параметры["РабочийДиск"]));
		КомандныйФайл.ДобавитьКоманду(СтрШаблон("cd %1", Параметры["РабочийКаталог"]));
	
		Токен = ЗначениеИзТекста(Пользователь, ПрочитатьФайл(Параметры["ФайлТокенов"]));

		Если Не ЗначениеЗаполнено(Токен) Тогда
			
			Отказ = Истина;
			ОбработатьИсключение("Не найден токен пользователя!");
			Возврат;

		КонецЕсли;

		ПараметрКлючПроекта = 	СтрШаблон("-Dsonar.projectKey=%1", 		КлючПроекта);
		ПараметрТокен = 		СтрШаблон("-Dsonar.login=%1", 			Токен);

		ПараметрыСканера = СтрШаблон("%1 %2", ПараметрКлючПроекта, ПараметрТокен);
	
		КомандныйФайл.ДобавитьКоманду(СтрШаблон("%1 %2", Параметры["РасположениеСканера"], ПараметрыСканера));
	
		КодВозврата = КомандныйФайл.Исполнить();
		Если КодВозврата = 0 Тогда

			Логирование.ЗаписатьСтрокуЛога("Сканирование sonar выполнено");

		Иначе

			Логирование.ЗаписатьСтрокуЛога("Ошибка при выполнении sonar сканирования!");

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаВнешнихОбработок

Процедура ВыгрузитьВнешниеОбработки(Отказ)

	Если Не Отказ Тогда

		Команда = Новый Команда;

		Команда.УстановитьКоманду(Параметры["ПутьДляЗапуска1С"]);
		Команда.ДобавитьПараметр("ENTERPRISE");
		Команда.ДобавитьПараметр(СтрШаблон("/S %1\%2", 		Параметры["ИмяСервера"], Параметры["ИмяБазы"]));
		Команда.ДобавитьПараметр(СтрШаблон("/N %1", 		Параметры["ПользовательИБ"]));
		Команда.ДобавитьПараметр(СтрШаблон("/P %1", 		Параметры["ПарольИБ"]));
		Команда.ДобавитьПараметр(СтрШаблон("/Execute %1", 	Параметры["ОбработкаВыгрузкиОбработок"]));
		Команда.ДобавитьПараметр("/DisableStartupMessages");
		
		КодВозврата = Команда.Исполнить();
		Если КодВозврата = 0 Тогда
		
			Логирование.ЗаписатьСтрокуЛога("Внешние отчеты и обработки выгружены");

		Иначе

			Отказ = Истина;
			ОбработатьИсключение("Ошибка при выгрузке внешних отчетов и обработок");
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Дополнительно

Функция ПрочитатьФайл(АдресФайла)

	ЧтениеТекста = Новый ЧтениеТекста();
	ЧтениеТекста.Открыть(АдресФайла);
	ТекстФайла = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Возврат ТекстФайла;

КонецФункции

Функция ЗначениеИзТекста(Ключ, Текст)

	ПозицияНачала = СтрНайти(Текст, Ключ);
	Если ПозицияНачала = 0 Тогда
		
		Возврат "";

	КонецЕсли;

	ОбрезокТекста = Прав(Текст, СтрДлина(Текст) - ПозицияНачала - СтрДлина(Ключ));
	ИскомоеЗначение = Лев(ОбрезокТекста, СтрНайти(ОбрезокТекста, Символы.ПС) - 1);
	
	Возврат ИскомоеЗначение;

КонецФункции

#КонецОбласти

#Область ЗаключительныеОперации

Процедура ЗавершитьВыполнение()
	
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("Деплой выполнен успешно");
	
КонецПроцедуры

Процедура ОбработатьИсключение(ТекстОшибки)
	
	Логирование.УвеличитьУровень();
	Логирование.ЗаписатьСтрокуЛога(ТекстОшибки);
	Логирование.УменьшитьУровень();
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("Во время деплоя произошла ошибка!");
	
КонецПроцедуры

#КонецОбласти

ПрочитатьПараметрыИзФайла();
ИнициализироватьЛог();
ИнициализироватьГит();
Отказ = Ложь;

Попытка
	
	ПодключитьУправлениеКластером();
	ОтключитьПользователейИБ();
	ОтключитьСоединенияИнформационнойБазы();

	УстановитьКонтекстКонфигурации();
		
	ПерейтиВВеткуГИТ(Отказ, Параметры["ИмяВеткиРабочая"]);
	УстановитьДампКонфигурации(Отказ, Параметры["ИмяВеткиРабочая"], Параметры["ДампКонфигурацииРабочая"]);
	ВыполнитьДеплой(Отказ, Параметры["КлючПроектаРабочая"], Параметры["ИмяВеткиРабочая"], 
	Параметры["ДампКонфигурацииРабочая"], Параметры["РабочееХранилище"]);
		
	ЗавершитьВыполнение();
	
Исключение
	
	ОбработатьИсключение(ОписаниеОшибки());
	
КонецПопытки;