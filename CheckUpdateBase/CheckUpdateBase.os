#Использовать ReadParams
#Использовать v8rac
#Использовать v8runner
#Использовать Tlog
#Использовать TMail

Перем Конфигуратор;
Перем УправлениеКластером;
Перем Параметры;
Перем Логирование;
Перем ПараметрыАвторизацииИБ;
Перем ВремяНачалаБлокировки;
Перем ВремяОкончанияБлокировки;

Процедура ПрочитатьПараметрыИзФайла()

	УстановитьТекущийКаталог("C:\scripts\CheckUpdateBase");
	Параметры = ЧтениеПараметров.Прочитать(ОбъединитьПути(ТекущийКаталог(), "CheckUpdateBase.json"));

КонецПроцедуры

Процедура ПолучитьПараметрыВремени()
	
	Если АргументыКоманднойСтроки.Количество() > 0 Тогда
	
		ВремяНачалаБлокировки = АргументыКоманднойСтроки[0];
		ВремяОкончанияБлокировки = АргументыКоманднойСтроки[1];

	Иначе

		ВремяНачалаБлокировки = "13:00";
		ВремяОкончанияБлокировки = "13:20";	

	КонецЕсли;

КонецПроцедуры

Процедура ИнициализироватьЛог()
	
	Логирование = Новый ТУправлениеЛогированием();
	Логирование.ДатаВремяВКаждойСтроке = Истина;
	Логирование.ВыводитьСообщенияПриЗаписи = Истина; 
	Логирование.СоздатьФайлЛога(Параметры["ИмяЛога"], Параметры["КаталогЛога"]);
	Логирование.ЗаписатьСтрокуЛога("Начало проверки наличия обновления " + Параметры["ИмяБазы"]);
	Логирование.УвеличитьУровень();

КонецПроцедуры

Процедура ПодключитьУправлениеКластером()
	
	УправлениеКластером = Новый УправлениеКластером;
	УправлениеКластером.УстановитьКластер(Параметры["ИмяСервераКластера"]);
	УправлениеКластером.ИспользоватьВерсию(Параметры["ВерсияПлатформы"]);
	УправлениеКластером.УстановитьАвторизациюКластера(Параметры["ПользовательКластера"], Параметры["ПарольКластера"]);
	УправлениеКластером.Подключить();
	ПараметрыАвторизацииИБ = ПараметрыАвторизацииИБ();
	Логирование.ЗаписатьСтрокуЛога("Управление кластером подключено");

КонецПроцедуры

Процедура УстановитьБлокировкуИБ()
	
	УправлениеКластером.БлокировкаИнформационнойБазы(Параметры["ИмяБазы"], СообщениеОБлокировке(), Параметры["КлючРазрешенияЗапуска"], 
		ТекущееВремяФорматаISO(ВремяНачалаБлокировки), ТекущееВремяФорматаISO(ВремяОкончанияБлокировки), Ложь, ПараметрыАвторизацииИБ);
	Логирование.ЗаписатьСтрокуЛога("Блокировка ИБ установлена");

КонецПроцедуры

Функция ТекущееВремяФорматаISO(Время)

	Возврат ПрочитатьДатуJSON(Формат(ТекущаяДата(), "ДФ=yyyy-MM-ddT") + Время + ":00Z", ФорматДатыJSON.ISO) 	

КонецФункции

Функция СообщениеОБлокировке()

	ТекстовыйФайл = Новый ЧтениеТекста(ОбъединитьПути(ТекущийКаталог(), "BlockMessage.txt"));
	СообщениеОБлокировке = СтрШаблон(ТекстовыйФайл.Прочитать(), ВремяНачалаБлокировки, ВремяОкончанияБлокировки);
	ТекстовыйФайл.Закрыть();
	
	Возврат СообщениеОБлокировке

КонецФункции

Функция ПараметрыАвторизацииИБ()
	
	ПараметрыАвторизации = Новый Структура();
	ПараметрыАвторизации.Вставить("Пользователь", Параметры["ПользовательИБ"]);
	ПараметрыАвторизации.Вставить("Пароль", Параметры["ПарольИБ"]);

	Возврат ПараметрыАвторизации

КонецФункции

Процедура СнятьБлокировкуИБ()

	УправлениеКластером.СнятьБлокировкуИнформационнойБазы(Параметры["ИмяБазы"], Ложь, ПараметрыАвторизацииИБ);
	Логирование.ЗаписатьСтрокуЛога("Блокировка ИБ снята");	

КонецПроцедуры

Процедура УстановитьКонтекстКонфигурации()

	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.УстановитьКонтекст("/S" + Параметры["ИмяСервера"] + "\" + Параметры["ИмяБазы"], Параметры["ПользовательИБ"], Параметры["ПарольИБ"]);
	Логирование.ЗаписатьСтрокуЛога("Информационная база подключена");

КонецПроцедуры

Функция КонфигурацияОтличаетсяОтХранилища()

	Конфигуратор.УстановитьКодЯзыкаСеанса("ru");
	Результат = Конфигуратор.КонфигурацияИХранилищеИдентичны(Параметры["ПутьКХранилищу"], Параметры["ПользовательХранилища"], Параметры["ПарольХранилища"]);
	Логирование.ЗаписатьСтрокуЛога("Сравнение конфигурации ИБ и конфигурации хранилища выполнено");
	Логирование.ЗаписатьСтрокуЛога(?(Результат, "Конфигурации идентичны", "Конфигурации различаются"));
	Возврат Не Результат

КонецФункции

Процедура ОтправитьПисьмоОбновления()
	
	УправлениеЭП = Новый ТУправлениеЭлектроннойПочтой();

	УчетнаяЗаписьЭП = УправлениеЭП.УчетнаяЗаписьЭП;
	УчетнаяЗаписьЭП.АдресSMTP 			= Параметры["АдресSMTP"];
	УчетнаяЗаписьЭП.ПользовательSMTP 	= Параметры["ПользовательSMTP"];
	УчетнаяЗаписьЭП.ПарольSMTP 			= Параметры["ПарольSMTP"];
	УчетнаяЗаписьЭП.ПортSMTP 			= Параметры["ПортSMTP"];
	
	СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
	СтруктураСообщения.АдресЭлектроннойПочтыПолучателя = Параметры["АдресПолучателя"];
		
	СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
	СтруктураСообщения.АдресЭлектроннойПочтыОтправителя = УправлениеЭП.УчетнаяЗаписьЭП.ПользовательSMTP;
	СтруктураСообщения.ТемаСообщения = СтрШаблон(Параметры["ТемаПисьма"], ВремяНачалаБлокировки);

	СтруктураСообщения.ТипТекстаПочтовогоСообщения = "Строка";
	СтруктураСообщения.Вставить("ТекстСообщения", ТекстСообщенияОбновления());
	
	Если УправлениеЭП.ОтправитьСообщение() Тогда
		
		Логирование.ЗаписатьСтрокуЛога("Письмо о планировании обновления отправлено");

	Иначе
	
		Логирование.УвеличитьУровень();
		Логирование.ЗаписатьСтрокуЛога(УправлениеЭП.ТекстОшибки);
		Логирование.УменьшитьУровень();

	КонецЕсли;

КонецПроцедуры

Функция ТекстСообщенияОбновления()

	ТекстовыйФайл = Новый ЧтениеТекста(ОбъединитьПути(ТекущийКаталог(), "CheckUpdateBaseMessage.txt"));
	Сообщение = ТекстовыйФайл.Прочитать();
	ТекстовыйФайл.Закрыть();
	
	Возврат СтрШаблон(Сообщение, ВремяНачалаБлокировки, ВремяОкончанияБлокировки)

КонецФункции

Процедура ЗавершитьПроверкуОбновления()
	
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("Проверка обновления завершена");	

КонецПроцедуры

Процедура ОбработатьИсключение(ТекстОшибки)

	СнятьБлокировкуИБ();
	Логирование.УвеличитьУровень();
	Логирование.ЗаписатьСтрокуЛога(ТекстОшибки);
	Логирование.УменьшитьУровень();
	ОтправитьПисьмоОбОшибке(ТекстОшибки);
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("Во время обновления произошла ошибка!");	

КонецПроцедуры

Процедура ОтправитьПисьмоОбОшибке(ТекстОшибки)
	
	УправлениеЭП = Новый ТУправлениеЭлектроннойПочтой();

	УчетнаяЗаписьЭП = УправлениеЭП.УчетнаяЗаписьЭП;
	УчетнаяЗаписьЭП.АдресSMTP 			= Параметры["АдресSMTP"];
	УчетнаяЗаписьЭП.ПользовательSMTP 	= Параметры["ПользовательSMTP"];
	УчетнаяЗаписьЭП.ПарольSMTP 			= Параметры["ПарольSMTP"];
	УчетнаяЗаписьЭП.ПортSMTP 			= Параметры["ПортSMTP"];
	
	СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
	СтруктураСообщения.АдресЭлектроннойПочтыПолучателя = Параметры["АдресПолучателяОшибки"];
		
	СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
	СтруктураСообщения.АдресЭлектроннойПочтыОтправителя = УправлениеЭП.УчетнаяЗаписьЭП.ПользовательSMTP;
	СтруктураСообщения.ТемаСообщения = "ОШИБКА " + СтрШаблон(Параметры["ТемаПисьма"], ВремяОкончанияБлокировки);

	СтруктураСообщения.ТипТекстаПочтовогоСообщения = "Строка";
	СтруктураСообщения.Вставить("ТекстСообщения", ТекстОшибки);
	
	Если УправлениеЭП.ОтправитьСообщение() Тогда
		
		Логирование.ЗаписатьСтрокуЛога("Письмо об ошибке отправлено");

	Иначе
		
		Логирование.УвеличитьУровень();
		Логирование.ЗаписатьСтрокуЛога(УправлениеЭП.ТекстОшибки);
		Логирование.УменьшитьУровень();

	КонецЕсли;

КонецПроцедуры

ПолучитьПараметрыВремени();
ПрочитатьПараметрыИзФайла();

Попытка

	ИнициализироватьЛог();

	ПодключитьУправлениеКластером();
	СнятьБлокировкуИБ();
	УстановитьКонтекстКонфигурации();

	Если КонфигурацияОтличаетсяОтХранилища() Тогда
		
		УстановитьБлокировкуИБ();
		ОтправитьПисьмоОбновления();

	КонецЕсли;

	ЗавершитьПроверкуОбновления();

Исключение

	СнятьБлокировкуИБ();
	ОбработатьИсключение(ОписаниеОшибки());

КонецПопытки;